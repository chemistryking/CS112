Script started on Mon 19 Feb 2018 04:38:06 PM EST
pjh26@leibniz:~/112/proj02$ ls
array.cpp  arrayData.txt  array.h  ArrayTester.cpp  ArrayTester.h  Debug  main.cpp  typescript
pjh26@leibniz:~/112/proj02$ cat array.cpp array         h array.cpp array     ArrayTest. er.h Arraty  yTester.cpp main.cpp arrayData.txt
/* array.h declares "C style" array operations.
 * Name:
 * Date:
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
 
#include <iostream>

using namespace std;

void initialize(double * a, int size);

void print(double *a, int size);

double average(double *a, int size);

double sum(double *a, int size);

void read(istream& in, double * a, int size);

void fill(const string& fileName, double *&a, int &numValues);

void resize(double *&a, int oldSize, int newSize);

void concat(double *a1, int size1, double *a2, int size2, double *&a3, int &size3);
/* array.cpp defines "C style" array operations
 * Name:
 * Date:
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
 
#include "array.h"
#include <fstream>
#include <cstdlib>
#include <iostream>
using namespace std;

void initialize(double * a, int size) {
	int val = 0;
	for (int i = 0; i < size; i++) {
		val = i+1;
		a[i] = val;
	}
}
 
void print(double *a, int size) {
	for (int i = 0; i < size; i++) {
		cout << *a << '\t';
		a++;
	}
}		

/* Inputs: Double pointer for an array and an int size of array
 * Outputs: Average of the values in the array
 */
double average(double *a, int size) {
	// Gathers the sum of the array
	double sum = 0.0;
	for ( int i = 0; i < size; i++) {
		sum += a[i];
	}
	// Divides that sum by the number of terms and returns
	return sum/size;
}

/* Inputs: Double pointer for the first slot of an array and an int size of array
 * Outputs: Sum of array
 * Description: Takes the location of an array and iterates through it taking the sum
 */
double sum(double *a, int size) {
	double sum = 0.0;
	for( int i = 0; i < size; i++ ) {
		sum += *a;
		a++;
	}
	return sum;
}

/* Inputs: An open istream, a pointer and a size
 * Creates an array using the values from istream and places them at the location *a points to and creates
 * an array of size "size"
 */
void read(istream& in, double * a, int size) {
	double tempVal;
	string tempValStr;
	for( int i = 0; i < size; i++ ) {
		in >> tempValStr;
		tempVal = atoi( tempValStr.c_str() );
		a[i] = tempVal;
	}

}

/* Inputs: a string filename, a pointer for an array
 * Reads the file and first grabs an array size then creates an array at the location of a.
 * Reads values from the file and places them in the array
 */
void fill(const string& fileName, double* &a, int &numValues) {
	ifstream fin;
	fin.open( fileName.c_str() );
	string numValuesStr;
	fin >> numValuesStr;
	numValues = atoi( numValuesStr.c_str() );

	delete [] a;
	a = new double[numValues];

	string tempVal;
	for( int i = 0; i < numValues; i++) {
		fin >> tempVal;
		a[i] = atoi( tempVal.c_str() );
	}
	fin.close();
}

/* Inputs: A pointer for an array and the old size of the array as well as the new size
 * Takes an array and adds zero on the end if newSize is bigger and truncates is newSize is smaller
 */
void resize(double* &a, int oldSize, int newSize) {
	double* temp = new double[oldSize];
	for(int i = 0; i < oldSize; ++i) {
		temp[i] = a[i];
	}

	delete [] a;
	a = new double[newSize];

	for(int i = 0; i < newSize; ++i) {
		if( i < oldSize ) {
			a[i] = temp[i];
		} else {
			a[i] = 0;
		}
	}
	delete [] temp;
}


/* Inputs: 3 pointers and array sizes
 * Creates a new array at location array 3 with the values of a2 tagged on to the end
 * of a1 at that location
 */
void concat(double * a1, int size1, double * a2, int size2, double * &a3, int &size3) {
	size3 = size1 + size2;
	delete [] a3;
	a3 = new double[size3];
	for( int i = 0; i < size1; i++ ) {
		a3[i] = a1[i];
	}
	for( int i = size1; i < size3; i++ ) {
		a3[i] = a2[i - size1];
	}
}

/*ArrayTester.h provides a class to test C-style array operations.
 * Student:
 * Date:
 * By: Joel Adams, for CS 112 at Calvin College.
 */
#ifndef ARRAY_TESTER_H_
#define ARRAY_TESTER_H_

#include "array.h"  // the functions we are testing
#include <iostream>
#include <cassert>
using namespace std;

class ArrayTester
{
public:
	ArrayTester();
	virtual ~ArrayTester();
	void runTests();
	void setup();
	void cleanup();
	void testInitialize();
	void testPrint();
	void testAverage();
	void testSum();
	void testResize();
	void testConcat();
	void testFill();
	void testRead();
private:
	double * a1;
	double * a2;
	double * a3;
};

#endif /*ARRAY_TESTER_H_*/
/* ArrayTester.cpp defines the methods to test C-style array operations.
 * Student:
 * Date:
 * By: Joel Adams, for CS 112 at Calvin College.
 */
 
 #include "ArrayTester.h"
 #include <fstream>
 using namespace std;

ArrayTester::ArrayTester() {
	a1 = a2 = a3 = NULL;
}

ArrayTester::~ArrayTester() {
        cleanup();
}

void ArrayTester::cleanup() {
	delete [] a1; a1 = NULL;
	delete [] a2; a2 = NULL;
	delete [] a3; a3 = NULL;
}

void ArrayTester::runTests() {
	testInitialize();
	testPrint();
	testAverage();
	testSum();
	testResize();
	testConcat();
	testFill();
	testRead();
	cout << "All tests passed!" << endl;
}

void ArrayTester::setup() {
	a1 = new double[3];
	for (int i = 0; i < 3; i++) {
		a1[i] = i+1;
	}
	a2 = new double[4];
	for (int i = 0; i < 4; i++) {
		a2[i] = i+2;
	}
	a3 = new double[5];
	for (int i = 0; i < 5; i++) {
		a3[i] = i+3;
	}
}

void ArrayTester::testInitialize()  {
	cout << "Testing initialize()... " << flush;
	setup();
	initialize(a1, 3);
	for (int i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	initialize(a2, 4);
	for (int i = 0; i < 4; i++) {
		assert( a2[i] == i+1 );
	}
	initialize(a3, 5);
	for (int i = 0; i < 5; i++) {
		assert( a3[i] == i+1 );
	}
        cleanup();
	cout << "Passed!" << endl;
}

void ArrayTester::testPrint() {
	cout << "Testing print()... " << flush;
	setup();
	cout << "\nExpecting 3 values: 1, 2, 3..." << endl;
	print(a1, 3);
	cout << "\nExpecting 4 values: 2, 3, 4, 5..." << endl;
	print(a2, 4);
	cout << "\nExpecting 5 values: 3, 4, 5, 6, 7..." << endl;
	print(a3, 5);
        cleanup();
	cout << "\nPassed!" << endl;
}

void ArrayTester::testAverage() {
	cout << "Testing average()... " << flush;
	setup();
	assert( average(a1, 3) == 2  );
	assert( average(a2, 4) == 3.5 );
	assert( average(a3, 5) == 5 );
        cleanup();
	cout << "Passed!" << endl;
}

void ArrayTester::testSum() {
	cout << "Testing sum()... " << flush;
	setup();
	assert( sum(a1, 3) == 6 );
	assert( sum(a2, 4) == 14 );
	assert( sum(a3, 5) == 25 );
        cleanup();
	cout << "Passed!" << endl;
}

void ArrayTester::testResize() {
	cout << "Testing resize()... " << flush;
	setup();
	double * temp1 = a1;
	resize(a1, 3, 7);
	assert( a1 != temp1 );
	for (int i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	for (int i = 3; i < 7; i++) {
		assert( a1[i] == 0 );
	}
	
	double *temp3 = a3;
	resize(a3, 5, 3);
	assert( temp3 != a3 );
	for (int i = 0; i < 3; i++) {
		assert( a3[i] == i+3 );
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}

void ArrayTester::testConcat() {
	cout << "Testing concat()... " << flush;
	setup();
	int size1 = 3, size2 = 4, size3 = 5;
	double *temp1 = a1;
	double *temp2 = a2;
	double *temp3 = a3;
	concat(a1, size1, a2, size2, a3, size3);
	assert( temp1 == a1 );
	assert( temp2 == a2 );
        /* the next assertion assumes that the new array's base
         *  address is different from the old array's base address,
         *  which may not be true. If concat() seems to be right,
         *  and passes all assertions except this one, you may
         *  comment out this assertion.
         */
//	assert( temp3 != a3 );
	assert( size1 == 3 );
	assert( size2 == 4 );
	assert( size3 == 7 );
	for (int i = 0; i < 3; i++) {
		assert( a3[i] == i+1 );
	}
	int j = 2;
	for (int i = 3; i < 7; i++) {
		assert( a3[i] == j );
		j++;
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}


void ArrayTester::testFill() {
	cout << "Testing fill()... " << flush;	
	setup();
	int size1 = 3;
	double *temp1 = a1;
	fill("arrayData.txt", a1, size1);
	assert( a1 != temp1 );
	assert( size1 == 6);
	for (int i = 0; i < size1; i++) {
		assert( a1[i] == i+10 );   // values should be 10, 11, 12, 13, 14, 15
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}

void ArrayTester::testRead() {
	cout << "Testing read()... " << flush;
	double* a4 = new double[6];
	ifstream fin("arrayData.txt");
	assert( fin.is_open() );
	string firstLine, secondLine;
	getline(fin, firstLine);         // skip past the '6' that's there for fill()...
	getline(fin, secondLine);        // skip past the '10' 
	read(fin, a4, 5);                // read 5 values instead of 6 
	for (int i = 0; i < 5; i++) {    // check what we got:
		assert( a4[i] == i+11 );	 //  values should be 11, 12, 13, 14, 15,
	}                                //   so test-values differ from fill()
        delete [] a4;
	cout << "Passed!" << endl;
}

/* main.cpp drives the testing of the array operations.
 * Student:
 * Date:
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
 
#include "ArrayTester.h"

int main() {
	ArrayTester at;
	at.runTests();
}
6
10
11
12
13
14
15pjh26@leibniz:~/112/proj02$ cd Debug
pjh26@leibniz:~/112/proj02/Debug$ ls
array.d  ArrayTester.d	main.d	makefile    proj02	subdir.mk
array.o  ArrayTester.o	main.o	objects.mk  sources.mk
pjh26@leibniz:~/112/proj02/Debug$ mad ke all
make: Nothing to be done for 'all'.
pjh26@leibniz:~/112/proj02/Debug$ cd ..
pjh26@leibniz:~/112/proj02$ ./Debug/proj02
Testing initialize()... Passed!
Testing print()... 
Expecting 3 values: 1, 2, 3...
1	2	3	
Expecting 4 values: 2, 3, 4, 5...
2	3	4	5	
Expecting 5 values: 3, 4, 5, 6, 7...
3	4	5	6	7	
Passed!
Testing average()... Passed!
Testing sum()... Passed!
Testing resize()... Passed!  But double-check that you deleted the old array...
Testing concat()... Passed!  But double-check that you deleted the old array...
Testing fill()... Passed!  But double-check that you deleted the old array...
Testing read()... Passed!
All tests passed!
pjh26@leibniz:~/112/proj02$ exit

Script done on Mon 19 Feb 2018 04:39:54 PM EST
