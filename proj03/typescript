Script started on Mon 26 Feb 2018 05:25:40 PM EST
pjh26@chomsky:~/112/proj03$ ls
App.cpp  tester.cpp  Vec.h	       vecTest1.txt	 VecTester.cpp
App.h	 typescript  vecStreamOut.txt  vecTest2Copy.txt  VecTester.h
Debug	 Vec.cpp     vecTest1Copy.txt  vecTest2.txt
pjh26@chomsky:~/112/proj03$ cat App.cpp App.h tester.cpp Cec.    Vec.cpp Vec.h vecStream Out.txt Ve  vecTest1cop   Copy.txz t vecTed st1.txt vecTest2.c  Copy.txt vecTest2.txt VecTester.cp pV  VecTestr er.H h
/*
 * App.cpp
 *
 *  Created on: Feb 26, 2018
 *      Author: pjh26
 */

#include "App.h"

App::App() {
	myDimensions = 0;

}


void App::runApp() {
	cout << "Welcome, please enter the number of dimensions" << endl;
	cin >> myDimensions;


	cout << "Please enter starting position." << flush;
	Vec v0 = createVec(myDimensions);

	cout << "\nSelect one:" << endl;

	while(true) {
		cout << "\n1 - Add new vector\n" << "2 - See final position\n" << "3 - Quit\n" << endl;
		unsigned userInput;
		cin >> userInput;

		if (userInput == 1) {
			Vec v1 = createVec(myDimensions);
			v0 = (v0 + v1);
		} else if (userInput == 2) {
			cout << "\n" << flush;
			for (unsigned i = 0; i < myDimensions; ++i) {
				cout << v0[i] << flush;
				if (i < myDimensions-1) { cout << "," << flush; }
			}
		} else if (userInput == 3) {
			break;

		} else {continue;}
	}
}

Vec App::createVec(unsigned dim) {
	cout << "Please enter Vec values." << endl;
	Vec vec(dim);
	for (unsigned i = 0; i < dim; ++i) {
		cin >> vec[i];
	}
	return vec;
}

/*
 * App.h
 * * Student Name:Peter Haagsma & Mitchell Brill
 * Date:February 26
 * Begun by: Peter Haagsma & Mitchell Brill, for CS 112 at Calvin College.
 */


#ifndef APP_H_
#define APP_H_
#include <iostream>
#include "Vec.h"

using namespace std;

class App {
public:
	App();
	void runApp();
	Vec createVec(unsigned int);

private:

	unsigned myDimensions;
};

#endif /* APP_H_ */
/* tester.cpp drives the testing of our Vec class.
 * Student Name:Peter Haagsma & Mitchell Brill
 * Date:February 26
 * Begun by: Peter Haagsma & Mitchell Brill, for CS 112 at Calvin College.
 */

#include "VecTester.h"
#include "App.h"

int main() {
	VecTester vt;
	vt.runTests();
	App app;
	app.runApp();
}
/* Vec.cpp defines the methods for Vec, a simple vector class.
 * Student Name:Peter Haagsma & Mitchell Brill
 * Date:February 26
 * Begun by: Peter Haagsma & Mitchell Brill, for CS 112 at Calvin College.
 */
 
#include "Vec.h"
#include <stdexcept>
#include <string>
#include <fstream>
#include <cstdlib>
// Default Constructor
Vec::Vec() {
	mySize = 0;
	myArray = NULL;
}


/* Explicit Constructor
 * @param a size for the array
 */
Vec::Vec(unsigned size) {
	mySize = size;

	if (mySize > 0) {
		myArray = new Item[mySize];
		for(unsigned i = 0; i < mySize; ++i ) {
			myArray[i] = 0;
		}
	} else { myArray = NULL; }

}


/* Copy constructor, takes a Vec object and creates a deep copy of it
 * @params: Vec original
 */
Vec::Vec(const Vec &original) {
	mySize = original.mySize;
	myArray = new Item[mySize];

	if (original.mySize > 0) {
		for (unsigned i = 0; i < mySize; ++i) {
			myArray[i] = original.myArray[i];
		}
	} else { myArray = NULL; }
}


/* operator[]: returns value of location in Vec object to be used
 * @params: unsigned index
 */
const Item& Vec::operator[](unsigned index) const{
	if (index >= 0 && index <= mySize) {
		return myArray[index];
	}
	throw range_error("Outside Vec Range");
}


/* operator[]: returns location in Vec object to be changed
 * @params: unsigned index
 */
Item& Vec::operator[](unsigned index) {
	if (index >= 0 && index <= mySize) {
		return myArray[index];
	}
	throw range_error("Outside Vec Range");
}



/* operator=: takes a Vec object and creates a deep copy of it
 * @params: Vec original
 * Precondition: Two Vec objects on either side of = operator
 * Postcondition: Two equal Vec objects
 */
Vec& Vec::operator=(const Vec& original) {
	if (myArray == original.myArray ) {
		return *this;
	} else if (original.mySize == 0) {
		mySize = 0;
		delete [] myArray;
		myArray = NULL;
		return *this;
	} else {
		mySize = original.mySize;
		delete [] myArray;
		myArray = new Item[mySize];

		for (unsigned i = 0; i < mySize; ++i) {
			myArray[i] = original.myArray[i];
		}
		return *this;
	}
}


/* getSize: getter for size of Vec object
 * Return: mySize
 */
unsigned Vec::getSize() const {
	return mySize;
}


/* setItem: sets a certain index of Vec object to a certain value
 * @params: unsigned index position, Item it (value index will be set to)
 * Precondition: Vec object
 * Postcondition: Vec with one index location changed
 */
void Vec::setItem(unsigned index, const Item& it) {
	if (index >= mySize || index < 0 || mySize == 0) {
		throw range_error("Selected index is outside of Vec Range.");
	} else {
		myArray[index] = it;
	}
}


/* getItem: getter for the value of a certain index position of Vec object
 * @params: unsigned index
 * Return: value of myArray index
 */
Item Vec::getItem(unsigned index) const {
	if (index >= mySize || index < 0 || mySize == 0) {
		throw range_error("Selected index is outside of Vec Range.");
	} else {
		return myArray[index];
	}
}


/* setSize: Changes size of Vec; either adding zeros to the end or truncating values
 * @params: unsigned newSize of Vec
 * Precondition: Vec object
 * Postcondition: Vec object of size newSize that has either been truncated or had zeros added to the end
 */
void Vec::setSize(unsigned newSize) {
	if (mySize == 0) {
		mySize = newSize;
		myArray = new Item[mySize];
		for (unsigned i = 0; i < mySize; ++i) {
			myArray[i] = 0;
		}
	} else if (newSize == 0) {
		mySize = 0;
		delete [] myArray;
		myArray = NULL;
	} else  if (newSize == mySize) {

	} else {
		Item* temp = myArray;
		myArray = new Item[newSize];
		unsigned oldSize = mySize;
		mySize = newSize;

		if (oldSize < newSize) {
			for (unsigned i = 0; i < oldSize; ++i) {
				myArray[i] = temp[i];
			}
			for (unsigned i = oldSize; i < newSize; ++i) {
				myArray[i] = 0;
			}
		} else {
			for (unsigned i = 0; i < newSize; ++i) {
				myArray[i] = temp[i];
			}
		}
	delete [] temp;
	}
}


/* operator==: Compares two Vec object testing for equality
 * @params: Vec v2
 * Returns: True if the Vec objects are equal and false otherwise
 */
bool Vec::operator==(const Vec &v2) {
	if (mySize != v2.mySize) {
		return false;
	} else {
		for (unsigned i = 0; i < mySize; ++i) {
			if (myArray[i] != v2.myArray[i]) {
				return false;
			}
		}
		return true;
	}
}


/* WriteTo: Writes the values of Vec object sequentially into a .txt file
 * @params: ostream out
 * Precondition: Vec object and open .txt file
 * Postcondition: Vec object and .txt file with values of Vec object copied in it.
 */
void Vec::writeTo(ostream& out) const {
	for (unsigned i = 0; i < mySize; ++i) {
		out << myArray[i] << endl;

	}
}


/* readFrom: Reads values from .txt file and places them in a Vec object
 * @params: istream in
 * Precondition: Vec object and .txt file with values in it
 * Postcondition: Vec object with values from .txt file in it
 */
void Vec::readFrom(istream& in) const {
	for (unsigned i = 0; i < mySize; ++i) {
	in >> myArray[i];
	}
}











/* readFrom: Reads values from .txt file and places them in a Vec object
 * @params: istream in
 * Precondition: Vec object and .txt file with values in it
 * Postcondition: Vec object with values from .txt file in it
 */
bool Vec::operator!=(const Vec &v2) {
	if (mySize != v2.mySize) {
		return true;
	} else {
		for (unsigned i = 0; i < mySize; ++i) {
			if (myArray[i] != v2.myArray[i]) {
				return true;
			}
		}
		return false;
	}
}


/* readFrom: Reads values from .txt file and places them in a Vec object
 * @params: istream in
 * Precondition: Vec object and .txt file with values in it
 * Postcondition: Vec object with values from .txt file in it
 */
Vec Vec::operator+(const Vec& v2) {
	if (mySize != v2.mySize) {
		throw invalid_argument("Vec objects must be of equal size to add.");
	} else {
		Vec v3(mySize);
		for (unsigned i = 0; i < mySize; ++i) {
			v3.myArray[i] = myArray[i] + v2.myArray[i];
		}
		return v3;
	}
}


/* readFrom: Reads values from .txt file and places them in a Vec object
 * @params: istream in
 * Precondition: Vec object and .txt file with values in it
 * Postcondition: Vec object with values from .txt file in it
 */
Vec Vec::operator-(const Vec& v2){
	if (mySize != v2.mySize) {
		throw invalid_argument("Vec objects must be of equal size to subtract.");
	} else {
		Vec v3(mySize);
		for (unsigned i = 0; i < mySize; ++i) {
			v3.myArray[i] = myArray[i] - v2.myArray[i];
		}
		return v3;
	}
}


/* readFrom: Reads values from .txt file and places them in a Vec object
 * @params: istream in
 * Precondition: Vec object and .txt file with values in it
 * Postcondition: Vec object with values from .txt file in it
 */
Item Vec::operator*(const Vec& v2) {
	if (mySize != v2.mySize) {
		throw invalid_argument("Vec objects must be of equal size to get dot product.");
	} else if (mySize == 0) {
		return 0;
	} else {
		Item product;
		for (unsigned i = 0; i < mySize; ++i) {
			product += myArray[i] * v2.myArray[i];
		}
		return product;
	}
}


/* readFrom: Reads values from .txt file and places them in a Vec object
 * @params: istream in
 * Precondition: Vec object and .txt file with values in it
 * Postcondition: Vec object with values from .txt file in it
 */
void Vec::readFrom(const string& filename) {
    ifstream fin( filename.c_str() );
    fin >> mySize;
    delete [] myArray;
    myArray = new Item[mySize];
    for (unsigned i = 0; i < mySize; ++i) {
    	fin >> myArray[i];
    }
	fin.close();
}


/* readFrom: Reads values from .txt file and places them in a Vec object
 * @params: istream in
 * Precondition: Vec object and .txt file with values in it
 * Postcondition: Vec object with values from .txt file in it
 */
void Vec::writeTo(const string& filename) {
    ofstream fout( filename.c_str() );
    fout << mySize << "\r";
    for (unsigned i = 0; i < mySize; ++i) {
    	fout << myArray[i] << "\r";
    }
	fout.close();
}



/* ~Vec: Destructor for the Vec object
 * Precondition: Vec object with values, size and location
 * Postcondition: Memory is freed and Vec no longer has values, location and size = 0
 */
Vec::~Vec() {
	mySize = 0;
	delete [] myArray;
	myArray = NULL;
}
/* Vec.h provides a simple vector class named Vec.
 * Student Name:Peter Haagsma & Mitchell Brill
 * Date:February 26
 * Begun by: Peter Haagsma & Mitchell Brill, for CS 112 at Calvin College.
 * operator[] read	Peter
 * operator[] write	Mitch
 * operator!=		Peter
 * readFrom			Peter
 * writeTo			Mitch
 * operator+		Mitch
 * operator-		Peter
 * operator*		Mitch
 */

#ifndef VEC_H_
#define VEC_H_

#include <iostream>
using namespace std;

typedef double Item;

class Vec {
public:
	Vec();
	Vec(unsigned size);
	Vec(const Vec &original);
	Vec& operator=(const Vec& original);
	unsigned getSize() const;
	void setItem(unsigned index, const Item& it);
	Item getItem(unsigned index) const;
	void setSize(unsigned newSize);
	bool operator==(const Vec &v2);
	void writeTo(ostream& out) const;
	void readFrom(istream& in) const;
	bool operator!=(const Vec &v2);
	Vec operator+(const Vec& v2);
	Vec operator-(const Vec& v2);
	Item operator*(const Vec& v2);
	void readFrom(const string& filename);
	void writeTo(const string& filename);

	const Item& operator[](unsigned index) const;
	Item& operator[](unsigned index);


	virtual ~Vec();
	
private:
	unsigned mySize;
	Item*    myArray;
	friend class VecTester;
};

#endif /*VEC_H_*/
5
10
11
12
13
14
31233
1
2
3424684
2
4
6
8/* VecTester.cpp defines the unit test-methods for Vec, a simple vector class.
 * Student Name:Peter Haagsma & Mitchell Brill
 * Date:February 26
 * Begun by: Peter Haagsma & Mitchell Brill, for CS 112 at Calvin College.
 */
 
#include "VecTester.h"
#include <iostream>     // cout, cerr, ...
#include <fstream>      // ifstream, ofstream, ...
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // range_error, ...
using namespace std;

void VecTester::runTests() const {
	cout << "Testing class Vec" << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testDestructor();
	testAssignment();
	testGetSize();
	testSetItem();
	testGetItem();
	testSetSize();
	testEquality();
	testWriteToStream();
	testReadFromStream();
	testInequality();
	testAddition();
	testSubtraction();
	testDotProduct();
	testReadFromFile();
	testWriteToFile();
	testSubscriptGetter();
	testSubscriptAssign();

	cout << "All tests passed!" << endl;
}

void VecTester::testDefaultConstructor() const {
	cout << "Testing default constructor... " << flush;
	Vec v;
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed!" << endl;
}

void VecTester::testExplicitConstructor() const {
	cout << "Testing explicit constructor... " << flush;
	cout << " 1 " << flush;
	Vec v1(3);
	assert( v1.mySize == 3 );
	assert( v1.myArray != NULL );
	for (int i = 0; i < 3; i++) {
		assert( v1.myArray[i] == 0 );
	}
	cout << " 2 " << flush;
	Vec v2(8);
	assert( v2.mySize == 8 );
	assert( v2.myArray != NULL );
	for (int i = 0; i < 8; i++) {
		assert( v2.myArray[i] == 0 );
	}
	cout << " 3 " << flush;
	Vec v3(0);
	assert( v3.mySize == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testCopyConstructor() const {
	cout << "Testing copy constructor..." << flush;
	cout << " 1 " << flush;
	Vec v1;
	Vec v2(v1);
	assert( v2.mySize == 0 );
	assert( v2.myArray == NULL);

	cout << " 2 " << flush;
	Vec v3(5);
	Vec v4(v3);
	assert(v4.mySize == 5);
	assert(v4.myArray != NULL);
	assert(v4.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == 0 );
	}

	cout << " 3 " << flush;
	Vec v5(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.myArray[i] = (i+1);
	}
	Vec v6(v5);
	assert( v6.mySize == 5 );
	assert( v6.myArray != NULL );
	assert( v6.myArray != v5.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == v5.myArray[i] );
	}
	cout << "Passed!" << endl;
}

void VecTester::testDestructor() const {
	cout << "Testing destructor... " << flush;
	Vec v(5);
	v.~Vec();
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed, but make sure ~Vec() is returning the array's memory to the system!" << endl;
}

void VecTester::testAssignment() const {
	cout << "Testing =..." << flush;
	// empty-to-empty
	Vec v, v0;
	v = v0;
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout << " 0 " << flush;
	// empty-to-nonempty
	Vec v1;
	Vec v2(5);
	v2 = v1;
	assert(v2.mySize == 0);
	assert(v2.myArray == NULL);
	cout << " 1 " << flush;
	// nonempty-to-empty
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.myArray[i] = (i+1);
	}
	Vec v4;
	v4 = v3;
	assert( v4.mySize == 5 );
	assert( v4.myArray != v3.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == (i+1) );
	}
	cout << " 2 " << flush;
	// nonempty-to-nonempty (larger into smaller)
	Vec v5(2);
	for (unsigned i = 0; i < 2; i++) {
		v5.myArray[i] = (i+1)*10;
	}
	v5 = v3;
	assert(v5.mySize == 5);
	assert(v5.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v5.myArray[i] == (i+1) );
	}
	cout << " 3 " << flush;
	// nonempty-to-nonempty (smaller into larger)
	Vec v6(7);
	for (unsigned i = 0; i < 7; i++) {
		v6.myArray[i] = (i+1)*10;
	}
	v6 = v3;
	assert(v6.mySize == 5);
	assert(v6.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == (i+1) );
	}
	cout << " 4 " << flush;
	// nonempty-to-nonempty (equal sized)
	Vec v7(5);
	for (unsigned i = 0; i < 5; i++) {
		v7.myArray[i] = (i+1)*10;
	}
	v7 = v3;
	assert(v7.mySize == 5);
	assert(v7.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v7.myArray[i] == (i+1) );
	}
	cout << " 5 " << flush;
	// assignment chaining
	Vec v8;
	Vec v9(4);
	v9 = v8 = v3;
	assert( v9.mySize == 5 );
	assert( v9.mySize == 5 );
	assert( v8.myArray != v3.myArray );
	assert( v8.myArray != v3.myArray );
	assert( v9.myArray != v8.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v8.myArray[i] == (i+1) );
		assert( v9.myArray[i] == (i+1) );
	}
	cout << " 6 " << flush;
	// self-assignment (idiotic but legal) lol
	v3 = v3;
	assert( v3.mySize == 5 );
	assert( v3.myArray != NULL );
	for (unsigned i = 0; i < 5; i++) {
		assert(v3.myArray[i] == (i+1) );
	}
	cout << " 7 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testGetSize() const {
	cout << "Testing getSize()..." << flush;
	Vec v1;
	assert( v1.getSize() == 0 );
	cout << " 1 " << flush;
	Vec v2(5);
	assert( v2.getSize() == 5 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSetItem() const {
	cout << "Testing setItem()... " << flush;
	// empty case
	Vec v0;
	try {
		v0.setItem(0, 11);
		cerr << "setItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// nonempty case, valid subscript
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.myArray[i] == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty case, invalid subscript
	Vec v2(3);
	try {
		v2.setItem(3, 33);
		cerr << "setItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testGetItem() const {
	cout << "Testing getItem()... " << flush;
	// empty Vec
	Vec v0;
	try {
		v0.getItem(0);
		cerr << "getItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// non-empty, valid access
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.getItem(i) == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty Vec, invalid index
	Vec v2(3);
	try {
		v2.getItem(3);
		cerr << "getItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSetSize() const {
	cout << "Testing setSize()..." << flush;
	// empty
	Vec v0;
	v0.setSize(3);
	assert( v0.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v0.getItem(i) == 0 );
	}
	cout << " 0 " << flush;

	// non-empty, increasing
	Vec v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i+1);
	}
	Item * saveAddress = v1.myArray;
	v1.setSize(8);
	assert( v1.getSize() == 8 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v1.getItem(i) == (i+1) );
	}
	for (unsigned i = 5; i < 8; i++) {
		assert( v1.getItem(i) == 0 );
	}
	assert( v1.myArray != saveAddress );
	cout << " 1 " << flush;

	// non-empty, decreasing
	Vec v2(5);
	for (unsigned i = 0; i < 5; i++) {
		v2.setItem(i, i+1);
	}
	saveAddress = v2.myArray;
	v2.setSize(3);
	assert( v2.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v2.getItem(i) == (i+1) );
	}
	assert( v2.myArray != saveAddress );
	cout << " 2 " << flush;

	// non-empty, same-size
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.setItem(i, i+1);
	}
	saveAddress = v3.myArray;
	v3.setSize(5);
	assert( v3.getSize() == 5 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v3.getItem(i) == (i+1) );
	}
	assert( v3.myArray == saveAddress );
	cout << " 3 " << flush;
	// set size to zero
	v3.setSize(0);
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testEquality() const {
	cout << "Testing ==..." << flush;
	// empty case
	Vec v1;
	Vec v2;
	assert( v1 == v2 );
	cout << " 1 " << flush;

	// nonempty, same size, default values
	Vec v3(5);
	Vec v4(5);
	assert( v3 == v4 );
	cout << " 2 " << flush;

	// nonempty, same size, set values
	Vec v5(5);
	Vec v6(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.setItem(i, i+1);
		v6.setItem(i, i+1);
	}
	assert( v5 == v6 );
	cout << " 3 " << flush;

	// empty vs nonempty
	Vec v7;
	Vec v8(5);
	assert( !(v7 == v8) );
	cout << " 4 " << flush;

	// nonempty, same size, first value different
	Vec v9(5);
	Vec v10(5);
	Vec v11(5);
	Vec v12(5);
	v10.setItem(0, 1);
	assert( !(v9 == v10) );
	cout << " 5 " << flush;

	// nonempty, same size, middle value different
	v11.setItem(2, 1);
	assert( !(v9 == v11) );
	cout << " 6 " << flush;

	// nonempty, same size, last value different
	v12.setItem(4, 1);
	assert( !(v9 == v12) );
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testWriteToStream() const {
      cout << "Testing writeTo(ostream)... " << flush;
      Vec v1(5);
      for (unsigned i = 0; i < 5; i++) {
              v1.setItem(i, i+10);
      }
	// write to an ofstream instead of cout, to automate the test
      ofstream fout("vecStreamOut.txt");
      assert( fout.is_open() );
      fout << v1.getSize() << "\n";
      v1.writeTo(fout);
	fout.close();
	// now read in what we just wrote...
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
      unsigned size;
      fin >> size;
      assert( size == 5 );
      double value;
      for (unsigned i = 0; i < 5; i++) {
              fin >> value;
              assert( value == i+10 );
      }
      cout << "Passed! See 'vecStreamOut.txt' for values..." <<
      endl;
}

void VecTester::testReadFromStream() const {
      cout << "Testing readFrom(istream)... " << flush;
	// an ifstream is-an istream, so use one to automate the test
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
	// get the size and build the Vec
      unsigned size;
      fin >> size;
      assert( size == 5 );
      Vec v(size);
	// test readFrom()
      v.readFrom(fin);
      for (unsigned i = 0; i < 5; i++) {
              assert( v.getItem(i)== i+10 );
      }
	fin.close();
      cout << "Passed!" << endl;
}

void VecTester::testInequality() const {
	cout << "Testing !=... " << flush;
	// empty
	Vec v0;
	Vec v1;
	assert( !(v0 != v1) );
	cout << " 0 " << flush;
	// empty vs nonempty
	Vec v2(3);
	assert( v1 != v2 );
	cout << " 1 " << flush;
	// equal sized, same values
	Vec v3(3);
	Vec v4(3);
	assert( !(v3 != v4) );
	cout << " 2 " << flush;
	// equal sized, different values
	for (unsigned i = 0; i < 3; i++) {
		v4.myArray[i] = i+1;
	}
	assert( v3 != v4 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testAddition() const {
	cout << "Testing +... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;    // for test 2 below
	Vec v3 = v1 + v2;
	assert( v3.getItem(0) == 3 );
	assert( v3.getItem(1) == 6 );
	assert( v3.getItem(2) == 9 );
	cout << " 1 " << flush;
	// addition should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 + v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 + v4;
		cerr << "v2 + v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSubtraction() const {
	cout << "Testing -... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	Vec v3 = v1 - v2;
	assert( v3.getItem(0) == -1 );
	assert( v3.getItem(1) == -2 );
	assert( v3.getItem(2) == -3 );
	cout << " 1 " << flush;
	// subtraction should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 - v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 - v4;
		cerr << "v2 - v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testDotProduct() const {
	cout << "Testing *... " << flush;
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	double product = v1 * v2;
	assert( product == 28 );
	cout << " 1 " << flush;
	// dot product should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	product = v4 * v5;
	assert( product == 0 );
	cout << " 3 " << flush;
	// different sizes
	try {
		product = v2 * v4;
		cerr << "v2 * v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testReadFromFile() const {
	cout << "Testing readFrom()... " << flush;
	Vec v1;
	v1.readFrom("vecTest1.txt");
	assert( v1.getSize() == 3 );
	assert( v1.myArray != NULL );
	assert( v1.getItem(0) == 1 );
	assert( v1.getItem(1) == 2 );
	assert( v1.getItem(2) == 3 );
	cout << " 1 " << flush;

	Vec v2(5);
//	Item* oldAddr = v2.myArray;
	v2.readFrom("vecTest2.txt");
	assert( v2.getSize() == 4 );
	cout << " 2 " << flush;
	assert( v2.myArray != NULL );
	assert( v2.getItem(0) == 2 );
	assert( v2.getItem(1) == 4 );
	assert( v2.getItem(2) == 6 );
	assert( v2.getItem(3) == 8 );
       /* the last assertion assumes that the new array's base
        *  address is different from the old array's base address,
        *  which may not be true. If your method seems to be right,
        *  is correctly using delete to deallocate the old array,
        *  and passes all assertions except this one, you may
        *  comment out this assertion.
        */
//	assert( v2.myArray != oldAddr );
	cout << " 3 " << flush;
	cout << "Passed! Make sure you close the file..." << endl;
}

void VecTester::testWriteToFile() const {
	cout << "Testing writeTo()... " << flush;
	// read a vector we know into an empty Vec...
	Vec v1;
	v1.readFrom("vecTest1.txt");
	// make a copy of it in a different file
	v1.writeTo("vecTest1Copy.txt");
	cout << " 1 " << flush;
	cout << "vecTest1Copy.txt created " << flush;
	// read in the copy, and check it
	Vec v3;
	v3.readFrom("vecTest1Copy.txt");
      assert( v3.getSize() == 3 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 1 );
      assert( v3.getItem(1) == 2 );
      assert( v3.getItem(2) == 3 );
      cout << " 2 " << flush;

	// read a vector we know into a nonempty Vec...
	Vec v2(5);
	v2.readFrom("vecTest2.txt");
	// make a copy of it in a different file
	v2.writeTo("vecTest2Copy.txt");
	cout << " 3 " << flush;
	cout << "vecTest2Copy.txt created " << flush;
	// read in the copy and check it
	v3.readFrom("vecTest2Copy.txt");
      assert( v3.getSize() == 4 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 2 );
      assert( v3.getItem(1) == 4 );
      assert( v3.getItem(2) == 6 );
      assert( v3.getItem(3) == 8 );
      cout << " 4 " << flush;
	cout << "Passed!  Make sure you closed the file..." << endl;
}

void VecTester::testSubscriptGetter() const {
	cout << "Testing subscript getter... " << flush;


	Vec v0(5);
	Vec v1(5);
	for (unsigned i = 0; i < 5; ++i) {
		v0.myArray[i] = i+1;
		v1.myArray[i] = v0[i];
	}
	for (unsigned i = 0; i < 5; ++i) {
		assert( v0[i] == v1[i] );
	}
	cout << " 1 " << flush;
	try {
		v0[10];
		v0[-1];
		cerr << "Subscript accepted value outside range";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSubscriptAssign() const {
	cout << "Testing subscript assign... " << flush;


	Vec v0(5);
	for (unsigned i = 0; i < 5; ++i) {
		v0[i] = i+1;
	}
	for (unsigned i = 0; i < 5; ++i) {
		assert( v0[i] == i+1 );
	}
	cout << " 1 " << flush;
	try {
		v0[10];
		v0[-1];
		cerr << "Subscript accepted value outside range";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;

}
/* VecTester.h provides unit tests for Vec, a simple vector class.
 * Student Name:Peter Haagsma & Mitchell Brill
 * Date:February 26
 * Begun by: Peter Haagsma & Mitchell Brill, for CS 112 at Calvin College.
 */
 
#ifndef VECTESTER_H_
#define VECTESTER_H_

#include "Vec.h"

class VecTester {
public:
	void runTests() const;
	void testDefaultConstructor() const;
	void testExplicitConstructor() const;
	void testDestructor() const;
	void testGetSize() const;
	void testSetItem() const;
	void testGetItem() const;
	void testSetSize() const;
	void testCopyConstructor() const;
	void testAssignment() const;
	void testEquality() const;
	void testWriteToStream() const;
	void testReadFromStream() const;
	void testInequality() const;
	void testAddition() const;
	void testSubtraction() const;
	void testDotProduct() const;
	void testReadFromFile() const;
	void testWriteToFile() const;
	void testSubscriptGetter() const;
	void testSubscriptAssign() const;
};

#endif /*VECTESTER_H_*/
pjh26@chomsky:~/112/proj03$ cd d Debug
pjh26@chomsky:~/112/proj03/Debug$ ls
App.d  makefile    proj03      subdir.mk  tester.o  Vec.o	 VecTester.o
App.o  objects.mk  sources.mk  tester.d   Vec.d     VecTester.d
pjh26@chomsky:~/112/proj03/Debug$ make all
make: Nothing to be done for 'all'.
pjh26@chomsky:~/112/proj03/Debug$ cd.  ..
pjh26@chomsky:~/112/proj03$ ./Debug/proj03
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2  3  4 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
Testing subscript getter...  1  2 Passed!
Testing subscript assign...  1  2 Passed!
All tests passed!
Welcome, please enter the number of dimensions
5
Please enter starting position.Please enter Vec values.
0
0
0
0
0

Select one:

1 - Add new vector
2 - See final position
3 - Quit

1
Please enter Vec values.
1
2
3
4
5

1 - Add new vector
2 - See final position
3 - Quit

2

1,2,3,4,5
1 - Add new vector
2 - See final position
3 - Quit

1
Please enter Vec values.
5
4
3
2
1

1 - Add new vector
2 - See final position
3 - Quit

2

6,6,6,6,6
1 - Add new vector
2 - See final position
3 - Quit

3
pjh26@chomsky:~/112/proj03$ a2ps      exit

Script done on Mon 26 Feb 2018 05:28:06 PM EST
