Script started on Thu 05 Apr 2018 08:47:13 PM EDT
pjh26@kernighan:~/112/proj07$ ls
Debug		 ReversePoem.h		StackException.h  StackTester.h
poems		 ReversePoemTester.cpp	Stack.h		  tester.cpp
ReversePoem.cpp  ReversePoemTester.h	StackTester.cpp   typescript
pjh26@kernighan:~/112/proj07$ cat R Stack.h ReversePoem.h ReversePoem.cpp Reversep [Apjh26@kernighan:~/112/proj07$ cat Stack.h ReversePoem.h ReversePoem.cpp Reverse[K
[K[Apjh26@kernighan:~/112/proj07$ cat Stack.h ReversePoem.h ReversePoem.cpp ReverseP oemTester.h RE eversePoemTester.cpp [Als[K
[K[Apjh26@kernighan:~/112/proj07$ lscat Stack.h ReversePoem.h ReversePoem.cpp ReversePooemTester.h ReversePoemTester.cpp [Als[K
[K[Apjh26@kernighan:~/112/proj07$ ls  cat Stack Exception.h            Exception.h Stack.h StackTEst   ester.h StackTE [Apjh26@kernighan:~/112/proj07$ cat StackException.h Stack.h StackTester.h StackT[K
[K[Apjh26@kernighan:~/112/proj07$ cat StackException.h Stack.h StackTester.h StackTe ster.cpp ReversePoem.h ReversePoem.cpp REv  eversePoemTester.h ReversePoemTester.cpp  tester.cpp
/* StackException.h models exceptions in stack operations.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name: Peter Haagsma
 * 		   Date: March 27, 2018
 */

#ifndef STACK_EXCEPTION
#define STACK_EXCEPTION

#include <iostream>
using namespace std;

 
class StackException {
public:
   StackException(const string& whereThrown,
                  const string& message) { 
       myLocation = whereThrown; 
       myMessage = message; 
   }

   string asString() const {
       return "*** StackException in " +
               myLocation + ": " + myMessage; 
   }

private:
   string myLocation;
   string myMessage;
};  // StackException


/* Function to allow a StackException (or a subclass) to be displayed
 * via an ostream.
 * Parameters: out, an ostream;
 *             se, a StackException.
 * Postcondition: the string representation of se has been inserted
 * into out
 *             && return-value == out.
 */
inline ostream& operator<<(ostream& out, const StackException& se) {
      out << se.asString();
      return out;
}

#endif

/* Stack.h provides a (dynamic-array-based) Stack class.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name: Peter Haagsma
 * Date:		 March 27, 2018
 * 
 * Invariant: mySize == 0 && isEmpty() && !isFull()
 *         || mySize == myCapacity && !isEmpty() && isFull()
 *         || mySize > 0 && mySize < myCapacity && !isEmpty() && !isFull().
 * Notes: 
 * 1. Member mySize always contains the index of the next empty space in myArray
 *        (the index of the array element into which the next pushed item will be placed).
 * 2. Sending push() to a full Stack throws the exception Stack::Overflow.
 * 3. Sending pop() or peekTop() to an empty Stack throws the exception Stack::Underflow.
 */

#ifndef STACK_H_
#define STACK_H_

#include <string>
#include <iostream>
#include "StackException.h"

using namespace std;

//typedef int  Item;
template <class Item>
class Stack {
public:
	Stack(unsigned capacity);
	Stack(const Stack<Item>& original);
	~Stack();
	Stack<Item>& operator=(const Stack<Item>& original);
	bool isEmpty() const;
	bool isFull() const;
	unsigned getSize() const { return mySize; }
	unsigned getCapacity() const { return myCapacity; }
	void setCapacity(unsigned newCap);
	void push(const Item& it);
	const Item& peekTop() const;
	Item pop();
	
protected:
	void makeCopyOf(const Stack<Item>& original);
	
private:
	unsigned myCapacity;
	unsigned mySize;
	Item*    myArray;
	friend class StackTester;
};

template <class Item>
Stack<Item>::Stack(unsigned capacity) {
	if (capacity < 1) {
		throw StackException("Stack(size)", "size must be positive!");
	}
	mySize = 0;
	myCapacity = capacity;
	myArray = new Item[capacity];
}

/* copy constructor
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
template <class Item>
Stack<Item>::Stack(const Stack<Item>& original) { // @suppress("Class members should be properly initialized")
	makeCopyOf(original);
}

/* utility method containing code refactored from
 *  the copy constructor and operator=.
 * Parameter: original, a Stack (const reference).
 * Precondition: original.myCapacity > 0.
 * Postcondition: I am a copy of original.
 */
template <class Item>
void Stack<Item>::makeCopyOf(const Stack<Item>& original) {
	myCapacity = original.myCapacity;
	myArray = new Item[myCapacity];

	for (unsigned i = 0; i < myCapacity; i++) {
		myArray[i] = original.myArray[i];
	}
	mySize = original.mySize;
}

/* destructor
 * Postcondition: myCapacity == 0 && mySize == 0
 *             && myArray has been deallocated.
 */
template <class Item>
Stack<Item>::~Stack() {
	delete [] myArray;
	myArray = NULL;
	myCapacity = 0;
	mySize = 0;
}

/* assignment operator
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original
 *              && I have been returned.
 */
template <class Item>
Stack<Item>& Stack<Item>::operator=(const Stack<Item>& original) {
	if (this != &original) {
		delete [] myArray;
		makeCopyOf(original);
	}
	return *this;
}

/* Checks if the stack is empty
 * returns: true if the size is 0, otherwise false
 */
template <class Item>
bool Stack<Item>::isEmpty() const {
	return mySize == 0;
}

/* Checks if the stack is full
 * returns: true if the size is equal to capacity, otherwise false
 */
template <class Item>
bool Stack<Item>::isFull() const {
	return mySize == myCapacity;
}

/* Adds item to the top of the stack
 * @params: Some Item it
 * Precondition:  Stack object
 * Postcontition: Same stack object with new item it added to the end if there is room for it
 */
template <class Item>
void Stack<Item>::push(const Item& it) {
	if ( isFull() ) {
		throw StackException("push()", "stack is full!");
	}
	myArray[mySize++] = it;
}

/* Getter for the top item of our stack
 * returns: a read-only reference of the top Item
 */
template <class Item>
const Item& Stack<Item>::peekTop() const {
	if ( isEmpty() ) {
		throw StackException("peekTop()", "stack is empty!");
	}
	return myArray[mySize - 1];
}

/* "Removes" top item from stack and returns it
 * returns: copy of top item of stack
 * Precondition:  Stack object with some amount of items in it
 * Postcondition: Same stack object with the size reduced by 1.
 * 				  NOTE: Item is not immediately deleted/set to 0, the memory is allocated at runtime
 * 				  and it is therefore okay to leave that memory location with a value in it
 */
template <class Item>
Item Stack<Item>::pop() {
	if ( isEmpty() ) {
		throw StackException("pop()", "stack is empty");
	}
	return myArray[--mySize];
}

/* Changes capacity of stack
 * @params: unsigned new capacity
 * Precondition:  Stack of a certain capacity
 * Postcondition: New stack with same items and the new capacity
 * 				  If the new capacity is smaller than the original size
 * 				  then a stack exception is thrown
 */
template <class Item>
void Stack<Item>::setCapacity(unsigned newCap) {
	if (newCap < mySize) {
		throw StackException("setCapacity()", "New capacity must be equal to or larger than size!");
	}

	Item* tempArray = new Item[newCap];
	for ( unsigned i = 0; i < myCapacity; i++ ) {
		tempArray[i] = myArray[i];
	}
	delete [] myArray;
	myArray = tempArray;
	myCapacity = newCap;
}

#endif
/* StackTester.h declares a test-class for a dynamically allocated (array) Stack.
 * Joel Adams, for CS 112 at Calvin College
 * Student Name: Peter Haagsma
 * 		   Date: March 27, 2018
 */

#ifndef STACKTESTER_H_
#define STACKTESTER_H_


class StackTester {
public:
	void runTests();
	void testConstructor();
	void testGetters();
	void testIsEmpty();
	void testPushPeekTopAndIsFull();
	void testPop();
	void testCopyConstructor();
	void testAssignment();
	void testDestructor();
	void testSetCapacity();
};

#endif /*STACKTESTER_H_*/

/* StackTester.cpp defines test-methods for the 
 *  dynamically allocated (array) Stack operations
 * Joel Adams, for CS 112 at Calvin College
 * Student Name: Peter Haagsma
 * 		   Date: March 27, 2018
 */

#include "StackTester.h"
#include "StackException.h"
#include "Stack.h"
#include <iostream>  // cout, cerr, ...
#include <cassert>   // assert()
#include <cstdlib>   // exit()
using namespace std;

void StackTester::runTests() {
	cout << "Testing Stack class..." << endl;
	testConstructor();
	testGetters();
	testIsEmpty();
	testPushPeekTopAndIsFull();
	testPop();
	testCopyConstructor();
	testAssignment();
	testDestructor();
	testSetCapacity();
	cout << "All tests passed!" << endl;
}

void StackTester::testConstructor() {
	cout << "- Testing constructor... " << flush;
	// invalid parameter
	try {
		Stack<unsigned> s1(0);
		cerr << "\nConstructed stack of size 0\n";
		exit(1);
	} catch (const StackException& se) {
		cout << se << flush;
	}
	cout << " 1 " << flush;
	// valid parameter
	Stack<unsigned> s2(3);
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}
void StackTester::testGetters() {
	cout << "- Testing getters..." << flush;
	Stack<unsigned> s1(10);
	for (unsigned i = 0; i < 3; i++) {
		s1.push(i);
	}
	assert( s1.getSize() == 3 );
	assert( s1.getCapacity() == 10 );
	for (unsigned i = 0; i < 3; i++) {
		s1.push(i*2);
	}
	assert( s1.getSize() == 6 );
	assert( s1.getCapacity() == 10 );
	for (unsigned i = 0; i < 4; i++) {
		s1.push(i*3);
	}
	assert( s1.getSize() == 10 );
	assert( s1.getCapacity() == 10 );
	cout << "Passed!" << endl;
}
void StackTester::testIsEmpty() {
	cout << "- Testing isEmpty()... " << flush;
	// capacity 1
	Stack<unsigned> s1(1);
	assert( s1.isEmpty() );
	cout << " 1 " << flush;
	// capacity > 1
	Stack<unsigned> s2(3);
	assert( s2.isEmpty() );
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}
void StackTester::testPushPeekTopAndIsFull() {
	cout << "- Testing push()... " << flush;
	// test with capacity 1
	Stack<unsigned> s1(1);
	s1.push(11);
	assert( s1.peekTop() == 11 );
	assert( !s1.isEmpty() );
	assert( s1.isFull() );
	try {
		s1.push(22);
		cerr << "\npush() worked on a full stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 1 " << flush;
	}
	// test with capacity > 1
	Stack<unsigned> s2(3);
	s2.push(11);
	assert( s2.peekTop() == 11 );
	s2.push(22);
	assert( s2.peekTop() == 22 );
	s2.push(33);
	assert( s2.peekTop() == 33 );
	try {
		s2.push(44);
		cerr << "\npush() worked on a full stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 2 " << flush;
	}
	cout << " Passed! " << endl;
}
void StackTester::testPop() {
	cout << "- Testing pop()... " << flush;
	// try empty, capacity 1
	Stack<unsigned> s1(1);
	assert( s1.isEmpty() );
    try {
            s1.peekTop();
            cerr << "\npeekTop() worked on empty stack (size 1)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 0a " << flush;
    }
	try {
		s1.pop();
		cerr << "\npop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 0b " << flush;
	}

	// try empty, capacity > 1
	Stack<unsigned> s2(3);
	try {
		s2.pop();
		cerr << "\npop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 1a " << flush;
	}
    try {
            s2.peekTop();
            cerr << "\npeekTop() worked on empty stack (size 3)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 1b " << flush;
    }

	// try non-empty, capacity 1
    Stack<unsigned> s3(1);
	s3.push(11);
	assert( s3.peekTop() == 11 );
	assert( s3.pop() == 11 );
	cout << " 2 " << flush;
	try {
		s3.pop();
		cerr << "\ns3.pop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 2a " << flush;
	}
    try {
            s3.peekTop();
            cerr << "\ns3.peekTop() worked on empty stack (size 1)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 2b " << flush;
    }

	// try non-empty, capacity > 1
    Stack<unsigned> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	assert( s4.peekTop() == 33 );
	assert( s4.pop() == 33 );
	assert( s4.peekTop() == 22 );
	assert( s4.pop() == 22 );
	assert( s4.peekTop() == 11 );
	assert( s4.pop() == 11 );
	cout << " 3 " << flush;
	try {
		s4.pop();
		cerr << "\ns4.pop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 3a " << flush;
	}
    try {
            s4.peekTop();
            cerr << "\ns4.peekTop() worked on empty stack (size 3)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 3b " << flush;
    }

	cout << " Passed!" << endl;
}
void StackTester::testCopyConstructor() {
	cout << "- Testing copy constructor... " << flush;
	// minimal empty Stack
	Stack<unsigned> s1(1);
	Stack<unsigned> s2(s1);
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myCapacity == 1 );
	assert( s2.myArray != s1.myArray );
	cout << " 1 " << flush;
	// minimal non-empty Stack
	Stack<unsigned> s3(1);
	s3.push(11);
	Stack<unsigned> s4(s3);
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.peekTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// non-minimal, non-empty stack
	Stack<unsigned> s5(3);
	s5.push(11);
	s5.push(22);
	s5.push(33);
	Stack<unsigned> s6(s5);
	assert( s6.myCapacity == s5.myCapacity );
	assert( s6.mySize == s5.mySize );
	assert( s6.myArray != s5.myArray );
	assert( s6.pop() == 33 );
	assert( s6.pop() == 22 );
	assert( s6.pop() == 11 );
	assert( s5.peekTop() == 33 );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}
void StackTester::testAssignment() {
	cout << "- Testing assignment... " << flush;
	// minimal empty Stacks, same size
	Stack<unsigned> s1(1);
	Stack<unsigned> s2(1);
	s2 = s1;
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myArray != s1.myArray );
	assert( s2.myCapacity == 1 );
	cout << " 1 " << flush;
	// minimal non-empty Stack to empty Stack, same capacity
	Stack<unsigned> s3(1);
	s3.push(11);
	Stack<unsigned> s4(1);
	s4 = s3;
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.peekTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// minimal empty stack to non-empty stack, same capacity
	Stack<unsigned> s5(1);
	Stack<unsigned> s6(1);
	s6.push(11);
	s6 = s5;
	assert( s6.isEmpty() );
	assert( s6.myArray != NULL );
	assert( s6.myArray != s5.myArray );
	assert( s6.myCapacity == 1 );
	cout << " 3 " << flush;
	// non-minimal non-empty stack to empty stack, different capacities
	Stack<unsigned> s7(3);
	s7.push(11);
	s7.push(22);
	s7.push(33);
	Stack<unsigned> s8(2);
	s8 = s7;
	assert( s8.myArray != s7.myArray );
	assert( s8.myCapacity == s7.myCapacity );
	assert( s8.mySize == s7.mySize );
	assert( s8.pop() == 33 );
	assert( s8.pop() == 22 );
	assert( s8.pop() == 11 );
	assert( s7.peekTop() == 33 );
	cout << " 4 " << flush;
	// non-minimal, empty stack to non-empty stack, different capacities
	Stack<unsigned> s9(2);
	Stack<unsigned> s10(3);
	s10.push(11);
	s10.push(22);
	s10.push(33);
	s10 = s9;
	assert( s10.isEmpty() );
	assert( s10.myArray != s9.myArray );
	assert( s10.myCapacity == s10.myCapacity );
	cout << " 5 " << flush;
	// self-assignment, minimal size
	Stack<unsigned> s11(1);
	s11.push(11);
	s11 = s11;
	assert( s11.isFull() );
	assert( !s11.isEmpty() );
	cout << " 6 " << flush;
	// chaining
	Stack<unsigned> s12(2);
	s12.push(11);
	s12.push(22);
	Stack<unsigned> s13(1);
	Stack<unsigned> s14(1);
	s14 = s13 = s12;
	assert( s14.isFull() );
	assert( s14.myArray != s13.myArray );
	assert( s14.myArray != s12.myArray );
	assert( s14.pop() == 22 );
	assert( s14.pop() == 11 );
	assert( s14.isEmpty() );
	cout << " 7 " << flush;
      // self-assignment, non-minimal size
      s13 = s13;
	assert( !s13.isEmpty() );
	assert( s13.isFull() );
	assert( s13.pop() == 22 );
	assert( s13.pop() == 11 );
	assert( s13.isEmpty() );
	cout << " 8 " << flush;
	cout << "Passed!" << endl;
}
void StackTester::testDestructor() {
	cout << "- Testing destructor..." << flush;
	// minimal, empty
	Stack<unsigned> s1(1);
	s1.~Stack();
	assert( s1.isEmpty() );
	assert( s1.myArray == NULL );
	assert( s1.myCapacity == 0 );
	cout << " 1 " << flush;
	// minimal, non-empty
	Stack<unsigned> s2(1);
	s2.push(11);
	s2.~Stack();
	assert( s2.isEmpty() );
	assert( s2.myArray == NULL );
	assert( s2.myCapacity == 0 );
	cout << " 2 " << flush;
	// non-minimal, empty
	Stack<unsigned> s3(3);
	s3.~Stack();
	assert( s3.isEmpty() );
	assert( s3.myArray == NULL );
	assert( s3.myCapacity == 0 );
	cout << " 3 " << flush;
	// non-minimal, non-empty
	Stack<unsigned> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	s4.~Stack();
	assert( s4.isEmpty() );
	assert( s4.myArray == NULL );
	assert( s4.myCapacity == 0 );
	cout << " 4 " << flush;
	cout << " Passed!" << endl;
}
void StackTester::testSetCapacity() {
	cout << "- Testing setCapacity..." << flush;
	//Testing empty stack
	Stack<unsigned> s0(5);
	assert( s0.getSize() == 0 );
	assert( s0.getCapacity() == 5 );
	s0.setCapacity(10);
	assert( s0.getCapacity() == 10 );
	assert( s0.getSize() == 0 );
	for (unsigned i = 0; i < 10; i++) {
		s0.push(i + 1);
	}
	assert( s0.getCapacity() == 10 );
	assert( s0.getSize() == 10 );
	assert( s0.isFull() );
	cout << " 0 " << flush;
	//Testing valid resize
	Stack<unsigned> s1(5);
	for (unsigned i = 0; i < 5; i++) {
		s1.push(i + 1);
	}
	assert( s1.getSize() == 5 );
	assert( s1.getCapacity() == 5 );
	assert( s1.isFull() );
	s1.setCapacity(10);
	assert( s1.getSize() == 5 );
	assert( s1.getCapacity() == 10 );
	assert( !s1.isFull() );
	for (unsigned i = 0; i < 5; i++) {
		assert( s1.myArray[i] == i + 1);
	}
	cout << " 1 " << flush;
	//Testing invaled resize
	Stack<unsigned> s2(5);
	for (unsigned i = 0; i < 5; i++) {
		s2.push(i + 1);
	}
	assert( s2.getSize() == 5 );
	assert( s2.getCapacity() == 5 );
	assert( s2.isFull() );
	try {
		s2.setCapacity(3);
		cerr << "setCapacity set capacity below size";
		exit(1);
	} catch (const StackException& se) {
		cout << se << flush;
	}
	cout << " 2 " << flush;

	cout << "Passed!" << endl;
}




/* Declares ReversePoem class used to read poems and reverse them
 *
 * ReversePoem.h
 *
 *  Created on: Mar 28, 2018
 *      Author: Peter
 */

#ifndef REVERSEPOEM_H_
#define REVERSEPOEM_H_
#include <string>
#include <fstream>
#include <cassert>
#include "Stack.h"
#include "StackException.h"

using namespace std;
class ReversePoem {
public:
	ReversePoem(const string& poemFile);
	const string& getAuthor() const { return myAuthor; }
	const string& getTitle() const { return myTitle; }
	const string& getBody() const { return myBody; }
	const string& getBodyReversed() const { return myBodyReversed; }

private:
	friend class ReversePoemTester;
	string myAuthor;
	string myTitle;
	string myBody;
	string myBodyReversed;
};

#endif /* REVERSEPOEM_H_ */
/* Defines methods for ReversePoem class
 * ReversePoem.cpp
 *
 *  Created on: Mar 28, 2018
 *      Author: Peter Haagsma
 */

#include "ReversePoem.h"

/* Constructor for reversepoem object
 * @params: string file name with poem
 * Postcondition: file containing poem has been read
 * 				  Line 1 = myTitle
 * 				  Line 2 = myAuthor
 * 				  Line 3-end = myBody
 * 				  While creating myBody the lines are read into a stack
 * 				  Then the stack is read from top to bottom into myBodyReversed
 * 				  This reverses the poem and deletes the temporary stack
 */
ReversePoem::ReversePoem(const string& poemFile) {
	ifstream fin(poemFile.c_str());
	assert( fin.is_open() );
	getline(fin, myTitle);
	getline(fin, myAuthor);
	string newLine;
	Stack<string> tempStack(1);
	//Read file into Body and stack
	getline(fin, newLine); // Gets rid of line between Author and body
	while (getline(fin, newLine)) {
		myBody = myBody + newLine + "\r";
		try {
			tempStack.push(newLine);
		} catch (const StackException& se) {
			tempStack.setCapacity(tempStack.getCapacity()*2);
			tempStack.push(newLine);
		}
	}
	fin.close();
	assert( !fin.is_open() );
	//Read stack from top down into myBodyReversed
	while (true) {
		myBodyReversed = myBodyReversed + tempStack.pop() + "\r";
		if (tempStack.isEmpty()) {
			break;
		}
	}
}
/* ReversePoemTester.h
 * Tester class for the ReversePoem class
 *
 *  Created on: Mar 28, 2018
 *      Author: Peter
 */

#ifndef REVERSEPOEMTESTER_H_
#define REVERSEPOEMTESTER_H_
#include "ReversePoem.h"

class ReversePoemTester {
public:
	void runTests();
	void testConstructors();
	void testGetters();
};

#endif /* REVERSEPOEMTESTER_H_ */
/* ReversePoemTester.cpp
 * contains the methods for the ReversePoemTester class
 *
 *  Created on: Mar 28, 2018
 *      Author: Peter
 */

#include "ReversePoemTester.h"

void ReversePoemTester::runTests() {
	cout << "Testing ReversePoem class" << endl;
	testConstructors();
	testGetters();
	cout << "All tests passed!" << endl;
}

void ReversePoemTester::testConstructors() {
	cout << "- Testing constructor..." << flush;
	ReversePoem reverseTest("poems/testPoem.txt");
	assert( reverseTest.myAuthor == "Leo J. Smada\r" );
	assert( reverseTest.myTitle == "Cats\r" );
	assert( reverseTest.myBody == "I love it when cats rub against me.\r\rI could never say\r\rI hate those purring felines.\r\r");
	assert( reverseTest.myBodyReversed == "I hate those purring felines.\r\rI could never say\r\rI love it when cats rub against me.\r\r");
	cout << "Passed!" << endl;
}

void ReversePoemTester::testGetters() {
	cout << "- Testing getters..." << flush;

	ReversePoem reverseTest("poems/testPoem.txt");

	assert( reverseTest.getAuthor() == "Leo J. Smada\r" );
	assert( reverseTest.getTitle() == "Cats\r" );
	assert( reverseTest.getBody() == "I love it when cats rub against me.\r\rI could never say\r\rI hate those purring felines.\r\r");
	assert( reverseTest.getBodyReversed() == "I hate those purring felines.\r\rI could never say\r\rI love it when cats rub against me.\r\r");

	cout << "Passed" << endl;
}
/* tester.cpp is a "driver" to run the tests in the StackTester class.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name: Peter Haagsma
 * 		   Date: March 27, 2018
 */
 
#include "StackTester.h"
#include "ReversePoemTester.h"
int main() {
	StackTester st;
	st.runTests();
	ReversePoemTester rpt;
	rpt.runTests();

	while (true) {
		cout << "\nEnter the name of the poem file: "
			 << "\nEnter 1 to quit";
		string poemFile;
		cin >> poemFile;

		if (poemFile == "1") { break; }
		ReversePoem reversePoem(poemFile);
		cout << reversePoem.getTitle() << "\n"
			 << reversePoem.getAuthor() << "\n"
			 << "\n*** Top-To-Bottom ***\n\n"
			 << reversePoem.getBody()
			 << "\n\n*** Bottom-To-Top ***\n\n"
			 << reversePoem.getBodyReversed()
			 << endl;
	}
}

pjh26@kernighan:~/112/proj07$ cde    Debug
pjh26@kernighan:~/112/proj07/Debug$ make all
make: Nothing to be done for 'all'.
pjh26@kernighan:~/112/proj07/Debug$ cd ..
pjh26@kernighan:~/112/proj07$ ./Debug/proj07
Testing Stack class...
- Testing constructor... *** StackException in Stack(size): size must be positive! 1  2  Passed!
- Testing getters...Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing pop()...  0a  0b  1a  1b  2  2a  2b  3  3a  3b  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
- Testing setCapacity... 0  1 *** StackException in setCapacity(): New capacity must be equal to or larger than size! 2 Passed!
All tests passed!
Testing ReversePoem class
- Testing constructor...Passed!
- Testing getters...Passed
All tests passed!

Enter the name of the poem file: 
Enter 1 to quitpoems/love.txt
Love?
Anonymous

*** Top-To-Bottom ***

I don't love you anymore...I would be lying if I saidThat I still love you the way I always did.I'm sureNothing was in vain.And I feel inside of me thatYou mean nothing to meI could never really say thatOur time together matters.I feel more and more thatI'm forgetting you...And I will never use the phraseI love you.I'm sorry but I must tell the truth.

*** Bottom-To-Top ***

I'm sorry but I must tell the truth.I love you.And I will never use the phraseI'm forgetting you...I feel more and more thatOur time together matters.I could never really say thatYou mean nothing to meAnd I feel inside of me thatNothing was in vain.I'm sureThat I still love you the way I always did.I would be lying if I saidI don't love you anymore...

Enter the name of the poem file: 
Enter 1 to quitpoems/keepTheFaith.txt
Keep The Faith
Tiffany Cheung

*** Top-To-Bottom ***

The world is hopelessIt is not evident thatWe live for a purposeThe truth isWe come and we goNo need to care, no need to knowThey tell usWe have a heart and a soulBut that hardly changes anything, don't forgetOur lifetime is short and not within our controlThe power's in believingWe should have faith in ourselvesWell, I don't think soMost of us are meant to be ordinaryDreams are just hopes, which never come trueIt is foolish to presume thatWe can all be in God's glowThe future is not in our handsI would be lying to you if I saidWe can change the world togetherYou need to know thatWe can't make it happenIt's not wise to delude ourselves into the thought thatWe are more than who we think we are.

*** Bottom-To-Top ***

We are more than who we think we are.It's not wise to delude ourselves into the thought thatWe can't make it happenYou need to know thatWe can change the world togetherI would be lying to you if I saidThe future is not in our handsWe can all be in God's glowIt is foolish to presume thatDreams are just hopes, which never come trueMost of us are meant to be ordinaryWell, I don't think soWe should have faith in ourselvesThe power's in believingOur lifetime is short and not within our controlBut that hardly changes anything, don't forgetWe have a heart and a soulThey tell usNo need to care, no need to knowWe come and we goThe truth isWe live for a purposeIt is not evident thatThe world is hopeless

Enter the name of the poem file: 
Enter 1 to quitpoems/testPoem.txt
Cats
Leo J. Smada

*** Top-To-Bottom ***

I love it when cats rub against me.I could never sayI hate those purring felines.

*** Bottom-To-Top ***

I hate those purring felines.I could never sayI love it when cats rub against me.

Enter the name of the poem file: 
Enter 1 to quit1
pjh26@kernighan:~/112/proj07$ exit

Script done on Thu 05 Apr 2018 08:50:37 PM EDT
