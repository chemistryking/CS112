Script started on Thu 26 Apr 2018 04:49:12 PM EDT
pjh26@chomsky:~/112/proj09$ ls
BSTDups.txt  BSTSize.txt     BST_Tester.h     Debug	   tester.cpp
BST.h	     BST_Tester.cpp  DataSummary.xls  Exception.h  typescript
pjh26@chomsky:~/112/proj09$ cat cat tester.cpp BST.h BST_Tester.h BST_Tester.cpp Exceptionl .h BSTSize.txt BSTDup s.txt  [Apjh26@chomsky:~/112/proj09$ cat cat tester.cpp BST.h BST_Tester.h BST_Tester.cpp Exception.h BSTSize.txt BSTDucat tester.cpp BST.h BST_Tester.h BST_Tester.cpp Exception.h BSTSize.txt BSTDups.[1P[Ajh26@chomsky:~/112/proj09$ catat tester.cpp BST.h BST_Tester.h BST_Tester.cpp Exception.h BSTSize.txt BSTDups.t[1P[Ajh26@chomsky:~/112/proj09$ catt tester.cpp BST.h BST_Tester.h BST_Tester.cpp Exception.h BSTSize.txt BSTDups.tx[1Pt[Ah26@chomsky:~/112/proj09$ cat tester.cpp BST.h BST_Tester.h BST_Tester.cpp Exception.h BSTSize.txt BSTDups.txt[K[Ajh26@chomsky:~/112/proj09$ cat tester.cpp BST.h BST_Tester.h BST_Tester.cpp Exception.h BSTSize.txt BSTDups.t
t

#include "BST_Tester.h"
#include <fstream>
#include <cstring>
#include <string>
#include <cstdlib>

using namespace std;

void fileToBST() {
	ofstream fout("BSTSize.txt");
	ofstream foutDup("BSTDups.txt");
	for (unsigned i = 0; i < 10; i++) {
		BST<long int> tempBST;
		unsigned height;
		unsigned numDups = 0;
		string fileNames [10];
		fileNames[0] = "/home/cs/112/proj/09/randomInts01.txt";
		fileNames[1] = "/home/cs/112/proj/09/randomInts02.txt";
		fileNames[2] = "/home/cs/112/proj/09/randomInts03.txt";
		fileNames[3] = "/home/cs/112/proj/09/randomInts04.txt";
		fileNames[4] = "/home/cs/112/proj/09/randomInts05.txt";
		fileNames[5] = "/home/cs/112/proj/09/randomInts06.txt";
		fileNames[6] = "/home/cs/112/proj/09/randomInts07.txt";
		fileNames[7] = "/home/cs/112/proj/09/randomInts08.txt";
		fileNames[8] = "/home/cs/112/proj/09/randomInts09.txt";
		fileNames[9] = "/home/cs/112/proj/09/randomInts10.txt";

		ifstream fin(fileNames[i].c_str());
		string tempStr;
		long int tempLong;
		char* pEnd;
		while (fin) {
			getline(fin, tempStr);
			tempLong = strtol(tempStr.c_str(), &pEnd, 10);
			try {
				tempBST.insert(tempLong);
			} catch (Exception& e) {
				numDups++;
				cout << e << endl;
			}
		}
		fin.close();
		height = tempBST.getHeight();
		fout << height << endl;
		foutDup << numDups << endl;
		tempBST.~BST();
	}
	fout.close();
	foutDup.close();
}


int main() {
	BST_Tester bstt;
	bstt.runTests();
	fileToBST();
}
/* BST.h declares a "classic" binary search tree of linked nodes.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:
 * Date:
 * 
 * Class Invariant:
 *   myNumItems == 0 && myRoot == NULL ||
 *   myNumItems > 0 && 
 *     myRoot stores the address of a Node containing an item &&
 *       all items in myRoot->myLeft are less than myRoot->myItem &&
 *       all items in myRoot->myRight are greater than myRoot->myItem.
 */

#ifndef BST_H_
#define BST_H_

#include "Exception.h"
#include <iostream>
#include <fstream>
using namespace std;

//typedef double Item;
template <class Item>
class BST {
public:

	BST();

	virtual ~BST();
	bool isEmpty() const;
	unsigned getNumItems() const;

	void insert( const Item& it );
	bool contains( const Item& it );
	void traverseInorder();
	void traversePreorder();
	void traversePostorder();

	unsigned getHeight() const;

private:
	struct Node {
	    Node(const Item& it);
            virtual ~Node();
            void insert(const Item& it);
            bool contains(const Item& it);
            void traverseInorder();
            void traversePreorder();
            void traversePostorder();
            virtual void processItem();
            unsigned getHeight();

            Item myItem;
            Node* myLeft;
            Node* myRight;
	};
	Node* myRoot;
	unsigned myNumItems;
	friend class BST_Tester;
};

/* BST.cpp defines binary search tree methods.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:
 * Date:
 */

#include "BST.h"

/* Default constructor for the BST class
 * Postcondition: BST object created with size of zero and root set to NULL
 */
template <class Item>
BST<Item>::BST() {
	myRoot = NULL;
	myNumItems = 0;
}

/* Destructor for the BST class
 * Postcondition: All nodes deleted and root set to NULL and size set to 0
 */
template <class Item>
BST<Item>::~BST() {
	delete myRoot;
	myRoot = NULL;
	myNumItems = 0;
}

/* Constructor for BST::Node class
 * @params: const Item it
 * Postcondition: Object with item set to 'it' and two NULL pointers myRight and myLeft created
 */
template <class Item>
BST<Item>::Node::Node(const Item& it) {
   myItem = it;
   myLeft = NULL;
   myRight = NULL;
}

/* Destructor for BST::Node class
 * Postcondition: recursively called on all nodes causing all nodes to be deleted
 */
template <class Item>
BST<Item>::Node::~Node() {
	delete myLeft;
	delete myRight;
}

/* Checks if the BST is empty
 * returns: False if the number of items is 0, otherwise it returns true
 */
template <class Item>
bool BST<Item>::isEmpty() const {
	return myNumItems == 0;
}

/* Getter for the number of items in the BST
 * returns: number of items (myNumItems)
 */
template <class Item>
unsigned BST<Item>::getNumItems() const {
	return myNumItems;
}

/* Inserts a new node containing Item it in the proper place in the BST
 * @params: const Item it
 * Postcondition: BST with new node in the correct place
 */
template <class Item>
void BST<Item>::insert( const Item& it ) {
	if (myRoot == NULL) {
		Node* newNode = new BST::Node(it);
		myRoot = newNode;
		myNumItems++;
		return;
	}
	try {
		myRoot->insert(it);
	} catch (Exception& e) {
		throw Exception("BST::insert", "Item already in BST");
	}
	myNumItems++;
}

/* Called by BST::insert to get the item to the correct place in the binary search tree
 * 			 If either myRight or myLeft are != NULL then this is recursively called on them
 * 			 called on myLeft if it < myItem
 * 			 called on myRight if it > myItem
 * 			 If it == myItem an Exception is thrown
 */
template <class Item>
void BST<Item>::Node::insert(const Item& it) {
	if (it > myItem) {
		if (myRight == NULL) {
			myRight = new BST::Node(it);
		} else {
			myRight->insert(it);
		}
	} else if (it < myItem) {
		if (myLeft == NULL) {
			myLeft = new BST::Node(it);
		} else {
			myLeft->insert(it);
		}
	} else {
		throw Exception("BST::Node::insert(const Item& it)", "Item already in BST");
	}
}

/* Determines whether the BST contains a certain item
 * returns: true if item is in BST otherwise false
 */
template <class Item>
bool BST<Item>::contains(const Item& it) {
	if (myNumItems == 0) {
		return false;
	} else {
		return myRoot->contains(it);
	}
}

/* Called by BST::contains to determine if a certain item is in the BST
 * returns: true if myItem == it
 * 			if myLeft or myRight are not NULL then this is recursively called on those pointers
 * 			Otherwise it returns false
 */
template <class Item>
bool BST<Item>::Node::contains(const Item& it) {
	if (myItem == it) {
		return true;
	} else if (it > myItem) {
		if (myRight != NULL) {
			return myRight->contains(it);
		}
	} else if (it < myItem) {
		if (myLeft != NULL) {
			return myLeft->contains(it);
		}
	}
	return false;
}

/* Outputs the contents of BST into the console
 * Postcondition: Contents are output in the order that they are accessed
 */
template <class Item>
void BST<Item>::traversePreorder() {
	if ( !isEmpty() ) {
		myRoot->traversePreorder();
	}
}

/* Outputs the contents of BST into the cosole
 * Postcondition: Contents are output after the items below them are processed
 */
template <class Item>
void BST<Item>::traversePostorder() {
	if ( !isEmpty() ) {
		myRoot->traversePostorder();
	}
}

/* Outputs the contents of BST into the console
 * Postcondition: Contents are output from lowest to highest
 */
template <class Item>
void BST<Item>::traverseInorder() {
	if ( !isEmpty() ) {
		myRoot->traverseInorder();
	}
}

/* Used in the travers... functions
 * Postcondition: myItem is output to console
 */
template <class Item>
void BST<Item>::Node::processItem() {
		cout << ' ' << myItem;
}

/* Called by BST::traversePreorder to output contents of BST
 * Postcondition: outputs myItem and then recursively calls itself on myRight and myLeft
 */
template <class Item>
void BST<Item>::Node::traversePreorder() {
	processItem();
	if (myLeft != NULL) {
		myLeft->traversePreorder();
	}
	if (myRight != NULL) {
		myRight->traversePreorder();
	}
}

/* Called by BST::traversePostorder to output contenst of BST
 * Postcondition: recursively calls itself on myRight and myLeft and then outputs myItem
 */
template <class Item>
void BST<Item>::Node::traversePostorder() {
	if (myLeft != NULL) {
		myLeft->traversePostorder();
	}
	if (myRight != NULL) {
		myRight->traversePostorder();
	}
	processItem();
}

/* Called by BST::traverseInorder to output contents of BST
 * Postcondition: recursively calls itself on myLeft then outputs myItem
 * 				  then recursively calls itself on myRight
 */
template <class Item>
void BST<Item>::Node::traverseInorder() {
	if (myLeft != NULL) {
		myLeft->traverseInorder();
	}
	processItem();
	if (myRight != NULL) {
		myRight->traverseInorder();
	}
}

/* Returns height of the BST
 */
template <class Item>
unsigned BST<Item>::getHeight() const {
	if (myRoot != NULL) {
		return myRoot->getHeight();
	}
	return 0;

}

/* Called by BST::getHeight to find the height of the BST
 * Recursively calls itself until it gets to the bottom of the tree and then increments a variable on its way up
 * Which ever branch is larger is returned
 */
template <class Item>
unsigned BST<Item>::Node::getHeight() {
	unsigned rightHeight = 0;
	unsigned leftHeight = 0;

	if (myLeft !=  NULL) {
		leftHeight =  myLeft->getHeight();
	}
	if (myRight != NULL) {
		rightHeight = myRight->getHeight();
	}

	if (leftHeight > rightHeight) {
		return leftHeight + 1;
	} else {
		return rightHeight + 1;
	}

}

#endif /*BST_H_*/

/* BST_Tester.h declares a class to test class BST.
 * Joel Adams, for CS 112 at Calvin College.
 */

#ifndef BST_TESTER_H_
#define BST_TESTER_H_

#include "BST.h"
#include <iostream>
using namespace std;

class BST_Tester
{
public:
	void runTests();
	void testConstructor();
	void testInsert();
	void testContains();
	void testTraverse();
	void testGetHeight();
};

#endif /*BST_TESTER_H_*/
/* BST_Tester.cpp defines test-methods for class BST.
 * Joel Adams, for CS 112 at Calvin College.
 */
 
#include "BST_Tester.h"
#include <cassert>

void BST_Tester::runTests() {
	cout << "Testing class BST" << endl;
	testConstructor();
	testInsert();
	testContains();
	testTraverse();
	testGetHeight();
	cout << "All tests passed!" << endl;
}

void BST_Tester::testGetHeight() {
	cout << "Testing getHeight()..." << flush;
	BST<int> bst;
	// empty
	assert( bst.getHeight() == 0 );
	cout << " 0 " << flush;
	// balanced
	bst.insert(44);
	assert( bst.getHeight() == 1 );
	cout << " 1 " << flush;
	bst.insert(22);
	assert( bst.getHeight() == 2 );
	cout << " 2 " << flush;
	bst.insert(66);
	assert( bst.getHeight() == 2 );
	cout << " 3 " << flush;
	bst.insert(77);
	assert( bst.getHeight() == 3 );
	cout << " 4a " << flush;
	bst.insert(55);
	assert( bst.getHeight() == 3 );
	cout << " 4b " << flush;
	bst.insert(33);
	assert( bst.getHeight() == 3 );
	cout << " 4c " << flush;
	bst.insert(11);
	assert( bst.getHeight() == 3 );
	cout << " 4d " << flush;
	bst.insert(88);
	assert( bst.getHeight() == 4 );
	cout << " 4e " << flush;
	// chained ascending
	  BST<int> bst2a;
      bst2a.insert(11);
      bst2a.insert(22);
      bst2a.insert(33);
      bst2a.insert(44);
      bst2a.insert(55);
      bst2a.insert(66);
      bst2a.insert(77);
      assert( bst2a.getHeight() == 7 );
      cout << " 5a " << flush;
	// chained descending
      BST<int> bst2b;
      bst2b.insert(77);
      bst2b.insert(66);
      bst2b.insert(55);
      bst2b.insert(44);
      bst2b.insert(33);
      bst2b.insert(22);
      bst2b.insert(11);
      assert( bst2b.getHeight() == 7 );
      cout << " 5b " << flush;
	// four 4-node permutations
    BST<int> bst3;
	bst3.insert(44);
	assert( bst3.getHeight() == 1 );
      cout << " 6a " << flush;
	bst3.insert(22);
	assert( bst3.getHeight() == 2 );
      cout << " 6b " << flush;
	bst3.insert(33);
	assert( bst3.getHeight() == 3 );
      cout << " 6c " << flush;
	bst3.insert(55);
	assert( bst3.getHeight() == 3 );
      cout << " 6d " << flush;
    BST<int> bst4;
	bst4.insert(44);
	assert( bst4.getHeight() == 1 );
      cout << " 7a " << flush;
	bst4.insert(33);
	assert( bst4.getHeight() == 2 );
      cout << " 7b " << flush;
	bst4.insert(22);
	assert( bst4.getHeight() == 3 );
      cout << " 7c " << flush;
	bst4.insert(55);
	assert( bst4.getHeight() == 3 );
      cout << " 7d " << flush;
    BST<int>bst5;
	bst5.insert(44);
	assert( bst5.getHeight() == 1 );
      cout << " 8a " << flush;
	bst5.insert(33);
	assert( bst5.getHeight() == 2 );
      cout << " 8b " << flush;
	bst5.insert(55);
	assert( bst5.getHeight() == 2 );
      cout << " 8c " << flush;
	bst5.insert(66);
	assert( bst5.getHeight() == 3 );
      cout << " 8d " << flush;
    BST<int> bst6;
	bst6.insert(44);
	assert( bst6.getHeight() == 1 );
      cout << " 9a " << flush;
	bst6.insert(33);
	assert( bst6.getHeight() == 2 );
      cout << " 9b " << flush;
	bst6.insert(66);
	assert( bst6.getHeight() == 2 );
      cout << " 9c " << flush;
	bst6.insert(55);
	assert( bst6.getHeight() == 3 );
      cout << " 9d " << flush;
	cout << " Passed!" << endl;
}

void BST_Tester::testTraverse() {
	cout << "Testing traverse()..." << endl;
	BST<int> bst;
	bst.insert(55);
	bst.insert(33);
	bst.insert(11);
	bst.insert(22);
	bst.insert(44);
	bst.insert(77);
	bst.insert(99);
	bst.insert(88);
	bst.insert(66);

	cout << "- Preorder: expecting: 55 33 11 22 44 77 66 99 88" << endl;
	cout << "- Got                :" << flush;
	bst.traversePreorder(); cout << endl;

	cout << "\n- Postorder: expecting: 22 11 44 33 66 88 99 77 55" << endl;
	cout << "- Got                 :" << flush;
	bst.traversePostorder(); cout << endl;

	cout << "\n- Inorder: expecting: 11 22 33 44 55 66 77 88 99" << endl;
	cout << "- Got               :" << flush;
	bst.traverseInorder(); cout << endl;
		cout << " Passed!" << endl;
}

void BST_Tester::testContains() {
	cout << "Testing contains()... " << flush;
	// empty bst
	BST<int> bst;
	assert( !bst.contains(55) );
	cout << " 1 " << flush;
	// non-empty bst
	bst.insert(55);
	assert( bst.contains(55) );
	cout << " 2 " << flush;

	bst.insert(33);
	bst.insert(77);
	assert( bst.contains(55) );
	assert( bst.contains(33) );
	assert( bst.contains(77) );
	assert( !bst.contains(11) );
	assert( !bst.contains(111) );
	cout << " 3 " << flush;

	bst.insert(11);
	bst.insert(22);
	bst.insert(44);
	bst.insert(66);
	bst.insert(88);
	bst.insert(99);
	for (int i = 1; i <= 100; i++) {
		if ( i % 11 ) {
			assert( !bst.contains(i) );
		} else {
			assert( bst.contains(i) );
		}
	}
	cout << " 4 " << flush;

	cout << " Passed!" << endl;
}

void BST_Tester::testInsert() {
	cout << "Testing insert()... " << flush;
	BST<int> bst;
	assert( bst.isEmpty() );
	cout << " 0 " << flush;
	bst.insert(55);
	assert( !bst.isEmpty() );
	assert( bst.myRoot != NULL );
	assert( bst.myRoot->myItem == 55 );
	assert( bst.myRoot->myLeft == NULL );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.getNumItems() == 1 );
	cout << " 1 " << flush;

	bst.insert(33);
	assert( bst.getNumItems() == 2 );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft != NULL );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft->myItem == 33 );
	cout << " 2 " << flush;

	bst.insert(44);
	assert( bst.getNumItems() == 3 );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft->myRight != NULL );
	assert( bst.myRoot->myLeft->myRight->myItem == 44 );
	cout << " 3 " << flush;

	bst.insert(11);
	assert( bst.getNumItems() == 4 );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft->myLeft != NULL );
	assert( bst.myRoot->myLeft->myLeft->myItem == 11 );
	cout << " 4 " << flush;

	bst.insert(22);
	assert( bst.getNumItems() == 5 );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft->myLeft->myRight != NULL );
	assert( bst.myRoot->myLeft->myLeft->myRight->myItem == 22 );
	cout << " 5 " << flush;

	bst.insert(77);
	assert( bst.getNumItems() == 6 );
	assert( bst.myRoot->myRight != NULL );
	assert( bst.myRoot->myRight->myItem == 77 );
	cout << " 6 " << flush;

	bst.insert(66);
	assert( bst.getNumItems() == 7 );
	assert( bst.myRoot->myRight->myLeft->myItem == 66 );
	cout << " 7 " << flush;

	bst.insert(99);
	assert( bst.getNumItems() == 8 );
	assert( bst.myRoot->myRight->myRight->myItem == 99 );
	cout << " 8 " << flush;

	bst.insert(88);
	assert( bst.getNumItems() == 9 );
	assert( bst.myRoot->myRight->myRight->myLeft->myItem == 88 );
	cout << " 9 " << flush;

	try {
		bst.insert(55);
	} catch (Exception& e) {
		cout << " 10 " << flush;
	}

	try {
		bst.insert(11);
	} catch (Exception& e) {
		cout << " 11 " << flush;
	}

	try {
		bst.insert(88);
	} catch (Exception& e) {
		cout << " 12 " << flush;
	}

	bst.insert(111);
	assert( bst.getNumItems() == 10 );
	assert( bst.myRoot->myRight->myRight->myRight->myItem == 111 );
	cout << " 13 " << flush;

	cout << " Passed!" << endl;
}

void BST_Tester::testConstructor() {
	cout << "Testing constructor... " << flush;
	BST<int> bst;
	assert( bst.isEmpty() );
	assert( bst.getNumItems() == 0 );
	assert( bst.myRoot == NULL );
	assert( bst.myNumItems == 0 );
	cout << "Passed!" << endl;
}

/* Exception.h defines a class to consolidate the functionality
 *  that different kinds of exceptions have in common.
 * Joel Adams, for CS 112 at Calvin College.
 */

#ifndef EXCEPTION_H_
#define EXCEPTION_H_

#include <string>    // string
#include <iostream>  // ostream
using namespace std;

class Exception {
public:
   /* construct an Exception
    * Parameters: whereThrown, a string naming the method that threw me.
    *              message, a description of the problem.
    */
   Exception(const string& whereThrown, const string& message) { 
      myLocation = whereThrown; 
      myMessage = message; 
   }
   
   virtual ~Exception() {}
   
   /* build a string representation of myself
    * (polymorphic, in case you want to override it)
    */
   virtual string asString() const { 
   	  return "*** " + className() + " in " + myLocation + ": " + myMessage; 
   }
   
   /* polymorphic method to retrieve the name of the class
    *  (used by asString() above)
    */
   virtual string className() const {
   	  return "Exception";
   }

private:
   string myLocation;    // the method where I was thrown
   string myMessage;     // a description of the problem
};  // Exception

/* insert an Exception (or its subclass) into an ostream
 * Parameters: out, an ostream;
 *             e, an Exception.
 * Postcondition: out contains e's string representation
 *               && out is the return-value.
 */
inline ostream& operator<<(ostream& out, const Exception& e) {
	out << e.asString();
	return out;
}
      
#endif /*EXCEPTION_H_*/
47
49
47
51
48
46
47
51
49
49
1
1
1
1
1
1
1
1
1
1
pjh26@chomsky:~/112/proj09$ cd Debug
pjh26@chomsky:~/112/proj09/Debug$ ls
BST_Tester.d  BST_Tester.o  makefile  objects.mk  proj09  sources.mk  subdir.mk  tester.d  tester.o
pjh26@chomsky:~/112/proj09/Debug$ make all
make: Nothing to be done for 'all'.
pjh26@chomsky:~/112/proj09/Debug$ cd ..
pjh26@chomsky:~/112/proj09$ ./E Debug/proj09
Testing class BST
Testing constructor... Passed!
Testing insert()...  0  1  2  3  4  5  6  7  8  9  10  11  12  13  Passed!
Testing contains()...  1  2  3  4  Passed!
Testing traverse()...
- Preorder: expecting: 55 33 11 22 44 77 66 99 88
- Got                : 55 33 11 22 44 77 66 99 88

- Postorder: expecting: 22 11 44 33 66 88 99 77 55
- Got                 : 22 11 44 33 66 88 99 77 55

- Inorder: expecting: 11 22 33 44 55 66 77 88 99
- Got               : 11 22 33 44 55 66 77 88 99
 Passed!
Testing getHeight()... 0  1  2  3  4a  4b  4c  4d  4e  5a  5b  6a  6b  6c  6d  7a  7b  7c  7d  8a  8b  8c  8d  9a  9b  9c  9d  Passed!
All tests passed!
*** Exception in BST::insert: Item already in BST
*** Exception in BST::insert: Item already in BST
*** Exception in BST::insert: Item already in BST
*** Exception in BST::insert: Item already in BST
*** Exception in BST::insert: Item already in BST
*** Exception in BST::insert: Item already in BST
*** Exception in BST::insert: Item already in BST
*** Exception in BST::insert: Item already in BST
*** Exception in BST::insert: Item already in BST
*** Exception in BST::insert: Item already in BST
pjh26@chomsky:~/112/proj09$ exit

Script done on Thu 26 Apr 2018 04:52:33 PM EDT
