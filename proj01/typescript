Script started on Tue 13 Feb 2018 07:10:52 PM EST
pjh26@stroustrup:~/112/proj01$ ls
Application.cpp  Debug	       PlayList.h	   Song.cpp	   SongTester.h        typescript
Application.h	 main.cpp      PlayListTester.cpp  Song.h	   testSongOutput.txt
appTest.txt	 PlayList.cpp  PlayListTester.h    SongTester.cpp  testSongs.txt
pjh26@stroustrup:~/112/proj01$ cat Applci i  ication.cpp Application.h main.cpp PlayList.cpp PlayList.h PlayListS Teste r.cpp Play> ListTester.h Song.cpp Song.h Song  Tester.cpp Song  Tester.h appTEst.    est.txt testSongOUtput.txt         utput.txt testSongst.x   .txt [Ar.cpp PlayListTester.h Song.cpp Song.h SongTester.cpp SongTester.h appTest.txt testSongOutput.txt testSongs.tx[Kt
/*
 * Application.cpp
 *
 *  Created on: Feb 6, 2018
 *      Author: pjh26
 */

#include "Application.h"
#include <iostream>
#include <string>
#include <cstdlib>
#include <cassert>
#include <ios>      // I included these two to clear
#include <limits>   // the cin buffer

#include "Song.h"
#include "PlayList.h"

using namespace std;

/* Constructor for the PlayList manager application
 * This opens the selected file and stores it in a playlist then reads the user input for which function to run
 *
 */
Application::Application() {
	cout << "\nWelcome to the PlayList Manager!" << endl;
	cout << "Please enter the PlayList you would like to open..." << endl;
	cin >> myPlayListFileName;

	PlayList tempPlayList(myPlayListFileName);
	myPlayList = tempPlayList;

//	unsigned userInput;
	string userInputStr;
	while (true) {
//		cin.ignore(numeric_limits<streamsize>::max(),'\n');
		cout << "\nPlease Enter:" << endl;
		cout << "   1 - to search the PlayList for songs by a given artist" << endl;
		cout << "   2 - to search the PlayList for songs from a given year" << endl;
		cout << "   3 - to search the PlayList for songs with a given phrase in their title" << endl;
		cout << "   4 - to add a new song to the PlayList" << endl;
		cout << "   5 - to remove a song from the PlayList" << endl;
		cout << "   0 - to quit" << endl;

		cin >> userInputStr;
//		userInputStr = to_string(userInput);

		if (userInputStr == "1") {
			appSearchByArtist();
		}

		else if (userInputStr == "2") {
			appSearchByYear();
		}

		else if (userInputStr == "3") {
			appSearchByTitlePhrase();
		}

		else if (userInputStr == "4") {
			appAddSong();
		}

		else if (userInputStr == "5") {
			appRemoveSong();
		}

		else if (userInputStr == "0") {
			break;
		}
		else {
			cout << "Please enter a valid option." << endl;
		}
	}
	cout << "Exiting PlayList Manager..." << endl;
	myPlayList.save();
	cout << "Goodbye!" << flush;
}

/* Prompts the user to enter a name to search myPlayList for an artist
 * lists the songs out in the console if any are found.
 */
void Application::appSearchByArtist() const {
	cin.ignore(numeric_limits<streamsize>::max(),'\n');

	cout << "Enter Artist name to search..." << endl;
	string songArtist;

	getline(cin, songArtist);
	vector<Song> searchResults;

	searchResults = myPlayList.searchByArtist( songArtist );
	if (searchResults.size() == 0 ) { cout << "No songs by this artist." << endl;}
	for ( unsigned i = 0; i < searchResults.size(); i++ ) {
		cout << "\n" << searchResults[i].getTitle() << flush;
		cout << searchResults[i].getArtist() << flush;
		cout << searchResults[i].getYear() << endl;
	}
}

/* Prompts the user to enter a year to search myPlayList
 * lists the songs out in the console if any are found.
 */
void Application::appSearchByYear() const {
	cin.ignore(numeric_limits<streamsize>::max(),'\n');

	cout << "Enter song year to search..." << endl;
	string songYear;

	getline(cin, songYear);
	vector<Song> searchResults;

	searchResults = myPlayList.searchByYear( atoi( songYear.c_str() ) );
	if (searchResults.size() == 0 ) { cout << "No songs from this year." << endl;}
	for ( unsigned i = 0; i < searchResults.size(); i++ ) {
		cout << "\n" << searchResults[i].getTitle() << flush;
		cout << searchResults[i].getArtist() << flush;
		cout << searchResults[i].getYear() << endl;
	}
}

/* Prompts the user to enter a title phrase to search myPlayList
 * lists the songs out in the console if any are found.
 */
void Application::appSearchByTitlePhrase() const {
	cin.ignore(numeric_limits<streamsize>::max(),'\n');

	cout << "Enter title phrase to search..." << endl;
	string songTitlePhrase;
	getline(cin, songTitlePhrase);

	vector<Song> searchResults;
	searchResults = myPlayList.searchByTitlePhrase( songTitlePhrase );
	if (searchResults.size() == 0 ) { cout << "No songs of this title." << endl;}
	for ( unsigned i = 0; i < searchResults.size(); i++ ) {
		cout << "\n" << searchResults[i].getTitle() << flush;
		cout << searchResults[i].getArtist() << flush;
		cout << searchResults[i].getYear() << endl;
	}
}

/* Prompts user for artist, year, and title of a song then creates that song
 * adds said song to the playlist and saves it
 */
void Application::appAddSong() {
	cin.ignore(numeric_limits<streamsize>::max(),'\n');

	string songTitle, songArtist, yearString;
	unsigned songYear;

	cout << "Enter the Title of the song you wish to add to the PlayList..." << endl;
	getline(cin, songTitle);

	cout << "Enter the Artist of the song you wish to add to the PlayList..." << endl;
	getline(cin, songArtist);

	cout << "Enter the Year of the song you wish to add to the PlayList..." << endl;
	getline(cin, yearString);
	songYear = atoi( yearString.c_str() );

	Song newSong( songTitle, songArtist, songYear );

	myPlayList.addSong(newSong);
	myPlayList.save();

	cout << "Addition Successful!" << endl;
}

/* Prompts user for artist, year, and title of a song then creates that song
 * removes said song from the playlist and saves it
 */
void Application::appRemoveSong() {
	cin.ignore(numeric_limits<streamsize>::max(),'\n');

	string songTitle, songArtist, yearString;
	unsigned songYear;

	cout << "Enter the Title of the song you wish to remove to the PlayList..." << endl;
	getline(cin, songTitle);

	cout << "Enter the Artist of the song you wish to remove to the PlayList..." << endl;
	getline(cin, songArtist);

	cout << "Enter the Year of the song you wish to remove to the PlayList..." << endl;
	getline(cin, yearString);
	songYear = atoi( yearString.c_str() );

	Song removeSong(songTitle, songArtist, songYear);
	myPlayList.removeSong(removeSong);
	myPlayList.save();

	cout << "Song removal successful!" << endl;
}
/*
 * Application.h
 *
 *  Created on: Feb 6, 2018
 *      Author: pjh26
 */

#ifndef APPLICATION_H_
#define APPLICATION_H_
#include <string>
#include "PlayList.h"

using namespace std;

class Application {
public:
	Application();
	void appSearchByArtist() const;
	void appSearchByYear() const;
	void appSearchByTitlePhrase() const;
	void appAddSong();
	void appRemoveSong();
private:
	PlayList myPlayList;
	string myPlayListFileName;
};

#endif /* APPLICATION_H_ */
/*
 * main.cpp
 *
 *  Created on: Feb 5, 2018
 *      Author: Peter
 *      CS 112
 *      Project 1
 */

#include <iostream>
#include <string>
#include <cassert>
#include "SongTester.h"
#include "PlayListTester.h"
#include "Application.h"

using namespace std;

int main() {
	cout << "Preparing PlayList Manager!" << endl;
	SongTester sTester;
	sTester.runTests();
	PlayListTester plTester;
	plTester.runTests();
	Application();
}
/*
 * PlayList.cpp defines the PlayList methods
 * Student Name: Peter Haagsma
 * Date: Feb 6, 2018
 * CS112 Calvin College
 */

#include "PlayList.h"
#include "Song.h"
#include <fstream>    // iofstream
#include <cassert>    // assert()
#include <string>     // strings
using namespace std;


/* Default PlayList constructor
 * @param: none
 * Precondition: none
 * Postcondition: a playlist object is created.
 */
PlayList::PlayList() {
}

/*PlayList constructor
 * @param: fileName, a string
 * Precondition: fileName contains the name of a PlayList file.
 */
PlayList::PlayList(const string& fileName) {
	// open a stream to the PlayList file
	myPlayListFile = fileName;
	ifstream fin( fileName.c_str() );
	assert( fin.is_open() );

	// read each song and append it to mySongs
	Song s;
	string separator;
	while (true) {
		s.readFrom(fin);
		if ( !fin ) { break; }
		mySongs.push_back(s);
	}

	// close the stream
	fin.close();
}

/* Retrieve length of the playlist
 * Return: the number of songs in the playlist
 */
unsigned PlayList::getNumSongs() const {
	return mySongs.size();
}

/* Search By artist
 * @param: artist, a string
 * Return: a vector containing all the Songs in mySongs by artist.
 */
vector<Song> PlayList::searchByArtist(const string& artist) const {
	vector<Song> v;

	for (unsigned i = 0; i < mySongs.size(); i++) {
		if ( mySongs[i].getArtist().find(artist) != string::npos ) {
			v.push_back( mySongs[i] );
		}
	}
	return v;
}

/* Search By Year
 * @param: year, unsigned
 * Return: a vector containing all the Songs in mySongs from year.
 */
vector<Song> PlayList::searchByYear(unsigned year) const {
	vector<Song> v;

	for (unsigned i = 0; i < mySongs.size(); i++ ) {
		if ( mySongs[i].getYear() == year ) {
			v.push_back( mySongs[i] );
		}
	}
	return v;
}

/* Search By Title Phrase
 * @param: titlePhrase, a string
 * Return: a vector containing all the Songs in mySongs with titlePhrase.
 */
vector<Song> PlayList::searchByTitlePhrase (const string& titlePhrase) const {
	vector<Song> v;

	for (unsigned i = 0; i < mySongs.size(); i++ ) {
		if ( mySongs[i].getTitle().find(titlePhrase) != string::npos ) {
			v.push_back( mySongs[i] );
		}
	}
	return v;
}

/* Adds a song to playlist object
 * @param: newSong, a Song
 * Return: none
 */
void PlayList::addSong(const Song& newSong) {
	mySongs.push_back(newSong);
}

void PlayList::removeSong(const Song& aSong) {

	for ( unsigned i = 0; i < mySongs.size(); i++ ) {
		if ( mySongs[i] ==  aSong ) {
			mySongs.erase( mySongs.begin() + i );
		}
	}
}

/* Saves the playlist to the file that it was originally made from
 * No paramaters
 * Returns none
 */
void PlayList::save() const {
	ofstream fout( myPlayListFile.c_str() );
	for (unsigned i = 0; i < mySongs.size(); i++ ) {
		mySongs[i].writeTo( fout );
	}
}
/*
 * PlayList.h declares class PlayList
 * Student Name: Peter Haagsma
 * Date: February 6, 2018
 * CS112 Calvin College
 */

#ifndef PLAYLIST_H_
#define PLAYLIST_H_

#include "Song.h"
#include <vector>   //STL vector
#include <string>

using namespace std;

class PlayList {
public:
	PlayList();
	PlayList(const string& fileName);

	unsigned getNumSongs() const;

	vector<Song> searchByArtist(const string& artist) const;
	vector<Song> searchByYear(unsigned year) const;
	vector<Song> searchByTitlePhrase(const string& titlePhrase) const;

	void addSong(const Song& newSong);
	void removeSong(const Song& aSong);
	void save() const;
private:
	vector<Song> mySongs;
	string myPlayListFile;
};

#endif /* PLAYLIST_H_ */
/*
 * PlayListTester.cpp defines the PlayListTester methods
 * Student Name: Peter Haagsma
 * Date: Feb 6, 2018
 * CS112 Calvin College
 */

#include "PlayListTester.h"
#include "PlayList.h"
#include "Song.h"
#include <iostream>
#include <cassert>
#include <vector>

using namespace std;


void PlayListTester::runTests() {
	cout << "\nTesting class PlayList..." << endl;
	testConstructors();
	testSearchByArtist();
	testSearchByYear();
	testSearchByTitlePhrase();
	testAddRemoveSong();
	testSave();
	cout << "All tests passed!" << endl;
}

void PlayListTester::testConstructors() {
	cout << "- constructors..." << flush;
	PlayList pList("testSongs.txt");
	assert( pList.getNumSongs() == 4 );
	cout << " 0 " << flush;

	cout << " Passed!" << endl;
}

void PlayListTester::testSearchByArtist() {
	cout << "- searchByArtist()..." << flush;
	// load a playlist with test songs
	PlayList pList("testSongs.txt");

	// empty case (0)
	vector<Song> searchResult = pList.searchByArtist("Cream");
	assert( searchResult.size() == 0 );
	cout << "0 " << flush;

	// case of 1
	searchResult = pList.searchByArtist("Baez");
	assert( searchResult.size() == 1 );
	assert( searchResult[0].getTitle() == "Let It Be\r" );
	cout << "1 " << flush;

	// case of 2
	searchResult = pList.searchByArtist("Beatles");
	assert( searchResult.size() == 2 );
	assert( searchResult[0].getTitle() == "Let It Be\r" );
	assert( searchResult[1].getTitle() == "Penny Lane\r" );
	cout << "2 " << flush;

	cout << " Passed!" << endl;
}

void PlayListTester::testSearchByYear() {
	cout << "- searchByYear()..." << flush;
	// load a playlist with test songs
	PlayList pList("testSongs.txt");

	// empty case (0)
	vector<Song> searchResult = pList.searchByYear(2018);
	assert( searchResult.size() == 0 );
	cout << "0 " << flush;

	// case of 1
	searchResult = pList.searchByYear(2012);
	assert( searchResult.size() == 1 );
	assert( searchResult[0].getYear() == 2012 );
	cout << "1 " << flush;

	// case of 2
	searchResult = pList.searchByYear(1967);
	assert( searchResult.size() == 2 );
	assert( searchResult[0].getYear() == 1967 );
	assert( searchResult[1].getYear() == 1967 );
	cout << "2 " << flush;

	cout << " Passed!" << endl;
}

void PlayListTester::testSearchByTitlePhrase() {
	cout << "- searchByTitlePhrase()..." << flush;
	// load a playlist with test songs
	PlayList pList("testSongs.txt");

	// empty case (0)
	vector<Song> searchResult = pList.searchByTitlePhrase("Taxman");
	assert( searchResult.size() == 0 );
	cout << "0 " << flush;

	// case of 1
	searchResult = pList.searchByTitlePhrase("Call Me ");
	assert( searchResult.size() == 1 );
	assert( searchResult[0].getTitle() == "Call Me Maybe\r" );
	cout << "1 " << flush;

	// case of 2
	searchResult = pList.searchByTitlePhrase("Let It Be");
	assert( searchResult.size() == 2 );
	assert( searchResult[0].getTitle() == "Let It Be\r" );
	assert( searchResult[1].getTitle() == "Let It Be\r" );
	cout << "2 " << flush;

	cout << " Passed!" << endl;
}

void PlayListTester::testAddRemoveSong() {
	cout << "- addSong() & removeSong()..." << flush;
	// load a playlist with test songs
	PlayList pList("testSongs.txt");
	assert( pList.getNumSongs() == 4 );

	// create a test song
	Song s1("The Wall", "Pink Floyd", 1979);

	// add test song to the end of the playlist
	pList.addSong(s1);
	assert( pList.getNumSongs() == 5 );
	cout << " 0" << flush;

	vector<Song> searchResult = pList.searchByArtist( "Pink Floyd" );
	assert( searchResult.size() == 1 );
	assert( searchResult[0].getTitle() == "The Wall" );
	assert( searchResult[0].getArtist() == "Pink Floyd" );
	assert( searchResult[0].getYear() == 1979 );
	cout << " 1" << flush;

	// remove test song from the PlayList
	Song s2("The Wall", "Pink Floyd", 1979);
	pList.removeSong(s2);
	assert( pList.getNumSongs() == 4 );
	searchResult.clear();
	searchResult = pList.searchByArtist( "Pink Floyd" );
	assert( searchResult.size() == 0 );
	cout << " 2" << flush;

	cout << " Passed!" << endl;
}

void PlayListTester::testSave() {
	cout << "- save()..." << flush;

	// load a playlist with test songs
	PlayList pList("testSongs.txt");
	assert( pList.getNumSongs() == 4 );

	// create a test song and add it
	Song s1("The Wall", "Pink Floyd", 1979);
	pList.addSong(s1);

	// save it and make a new playlist
	pList.save();
	PlayList testpList("testSongs.txt");
	assert( pList.getNumSongs() == testpList.getNumSongs() );
	cout << " 0" << flush;
	// returning file to original state for future tests
	testpList.removeSong( s1 );
	testpList.save();
	assert( testpList.getNumSongs() == 4 );
	cout << " 1" << flush;

	cout << " Passed!" << endl;
}
/*
 * PlayListTester.h tests the PlayList class.
 * Student Name: Peter Haagsma
 * Date: Feb 6, 2018
 * CS112 Calvin College
 */

#ifndef PLAYLISTTESTER_H_
#define PLAYLISTTESTER_H_

class PlayListTester {
public:
	void runTests();
	void testConstructors();
	void testSearchByArtist();
	void testSearchByYear();
	void testSearchByTitlePhrase();
	void testAddRemoveSong();
	void testSave();
};

#endif /* PLAYLISTTESTER_H_ */
/*
 * Song.cpp defines the methods for class Song (see Song.h).
 * Student Name: Peter Haagsma
 * Date: Feb 5, 2018
 * CS112 Project 1
 */

#include "Song.h"
#include <string>
#include <cstdlib>

/* Song default constructor
 * Postcondition: myTitle and myArtist are empty strings
 * 				  && myYear == 0
 */
Song::Song() {
	myTitle = myArtist = "";
	myYear = 0;
}

/* Explicit constructor
 * @param: title, a string
 * @param: artist, a string
 * @year: an unsigned int.
 * Postcondition: myTitle == title &&
 * 				  myArtist == artist &&
 * 				  myYear == year
 */
Song::Song(const string& title, const string& artist, unsigned year) {
	myTitle = title;
	myArtist = artist;
	myYear = year;
}

/* getter method for myTitle
 * Return: myTitle
 */
string Song::getTitle() const {
	return myTitle;
}

/* getter method for myArtist
 * Return: myArtist
 */
string Song::getArtist() const {
	return myArtist;
}

/* getter method for myYear
 * Return: myYear
 */
unsigned Song::getYear() const {
	return myYear;
}

/* Song input method...
 * @param: in, an istream
 * Precondition: in contains the title, artist, and year data for a Song.
 * Postcondition: the title, aretist, and year data have been read fron in &&
 * 				  myTitle == title &&
 * 				  myArtist == artist &&
 * 				  myYear == year.
 */
void Song::readFrom(istream& in) {
	getline(in, myTitle);
	getline(in, myArtist);
	string yearString;
	getline(in, yearString);
	myYear = atoi( yearString.c_str() );
}

/* Song output...
 * @param: out, an ostream
 * Postcondition: out contains myTitle, a newline,
 * 							   myArtist, a newline,
 * 							   myYear, and a newline.
 */
void Song::writeTo(ostream& out) const {
	out << myTitle << "\n"
		<< myArtist << "\n"
		<< myYear << "\n";
}


/* == operator for Songs
 * Compares two Song objects
 * Returns: True if the Songs have the same Title, artist, and year
 */
bool Song::operator== (const Song& song2) const {
	if ( ( myTitle == song2.getTitle() ) && ( myArtist == song2.getArtist() ) && ( myYear == song2.getYear() )) {
		return true;
	}
	return false;
}
/*
 * Song.h declares a class for storing song information
 * Student Name: Peter Haagsma
 * Date: Feb 5, 2018
 * CS 112 Project 1
 */

#ifndef SONG_H_
#define SONG_H_
#include <string>
#include <fstream>
using namespace std;

class Song {
public:
	Song();
	Song(const string& title, const string& artist, unsigned year);
	string getTitle() const;
	string getArtist() const;
	unsigned getYear() const;
	void readFrom(istream& in);
	void writeTo(ostream& out) const;
	bool operator==(const Song& song2) const;
private:
	string myTitle;
	string myArtist;
	unsigned myYear;
};

#endif /* SONG_H_ */
/*
 * SongTester.cpp
 *
 *  Created on: Feb 5, 2018
 *      Author: Peter
 */

#include <cassert>
#include <iostream>
#include <fstream>
#include "SongTester.h"
#include "Song.h"

using namespace std;
SongTester::SongTester() {

}

void SongTester::runTests() {
	cout << "Testing class Song.." << endl;
	testConstructors();
	testReadFrom();
	testWriteTo();
	testOperator();
	cout << "All tests passed!" << endl;
}

void SongTester::testConstructors() {
	cout << "- constructors ... " << flush;
	// default constructor
	Song s;
	assert( s.getTitle() == "" );
	assert( s.getArtist() == "");
	assert( s.getYear() == 0);
	cout << "0 " << flush;

	// explicit constructor
	Song s1("Badge", "Cream", 1969);
	assert( s1.getTitle() == "Badge" );
	assert( s1.getArtist() == "Cream" );
	assert( s1.getYear() == 1969 );
	cout << "1 " << flush;

	cout << "Passed!" << endl;
}

void SongTester::testReadFrom() {
	cout << "- readFrom()..." << flush;
	ifstream fin("testSongs.txt");
	assert( fin.is_open() );
	Song s;

	// read first song in test playlist
	s.readFrom(fin);
	assert( s.getTitle() == "Call Me Maybe\r" );
	assert( s.getArtist() == "Carly Rae Jepsen\r" );
	assert( s.getYear() == 2012 );
	cout << "0 " << flush;

	// read second song in test playlist
	s.readFrom (fin);
	assert( s.getTitle() == "Let It Be\r");
	assert( s.getArtist() == "The Beatles\r" );
	assert( s.getYear() == 1967 );
	cout << "1 " << flush;

	// read third song in test playlist
	s.readFrom(fin);
	assert( s.getTitle() == "Let It Be\r" );
	assert( s.getArtist() == "Joan Baez\r" );
	assert( s.getYear() == 1971 );
	cout << "2 " << flush;

	// read fourth song in test playlist
	s.readFrom(fin);
	assert( s.getTitle() == "Penny Lane\r" );
	assert( s.getArtist() == "The Beatles\r" );
	assert( s.getYear() == 1967 );
	cout << "3 " << flush;

	fin.close();
	cout << "Passed!" <<endl;
}

void SongTester::testWriteTo() {
	cout << "- writeTo()... " << flush;

	// declare three songs
	Song s1("Badge", "Cream", 1969);
	Song s2("Godzilla", "Blue Oyster Cult", 1977);
	Song s3("Behind Blue Eyes", "The Who", 1971);

	// write the three songs to an output file
	ofstream fout("testSongOutput.txt");
	assert( fout.is_open() );
	s1.writeTo(fout);
	s2.writeTo(fout);
	s3.writeTo(fout);
	fout.close();

	// use readFrom() to see if writeTo() worked
	ifstream fin("testSongOutput.txt");
	assert( fin.is_open() );
	Song s4, s5, s6;

	// read and check the first song
	s4.readFrom(fin);
	assert( s4.getTitle() == "Badge" );
	assert( s4.getArtist() == "Cream" );
	assert( s4.getYear() == 1969 );
	cout << "0 " << flush;

	// read and check the second song
	s5.readFrom(fin);
	assert( s5.getTitle() == "Godzilla" );
	assert( s5.getArtist() == "Blue Oyster Cult" );
	assert( s5.getYear() == 1977 );
	cout << "1 " << flush;

	// read and check the third song
	s6.readFrom(fin);
	assert( s6.getTitle() == "Behind Blue Eyes" );
	assert( s6.getArtist() == "The Who" );
	assert( s6.getYear() == 1971 );
	cout << "2 " << flush;

	fin.close();
	cout << "Passed!" << endl;
}

void SongTester::testOperator() {
	cout << "- operator==... " << flush;

	// Create four test songs
	Song s1("Badge", "Cream", 1969);
	Song s2("", "Cream", 1969);       // Different Title
	Song s3("Badge", "", 1969);       // Different Artist
	Song s4("Badge", "Cream", 0);	  // Different Year

	assert( s1 == s1 );
	cout << "0 " << flush;

	assert( !(s1 == s2) );
	cout << "1 " << flush;

	assert( !(s1 == s3) );
	cout << "2 " << flush;

	assert( !(s1 == s4) );
	cout << "3 " << flush;

	cout << "Passed!" << endl;
}



/*
 * SongTester.h declares a test-class for class Song.
 *	Student Name: Peter Haagsma
 *  Date: Feb 5, 2018
 *  Author: Peter Haagsma
 */

#ifndef SONGTESTER_H_
#define SONGTESTER_H_

class SongTester {
public:
	SongTester();

	void runTests();

	void testConstructors();

	void testReadFrom();

	void testWriteTo();

	void testOperator();
};

#endif /* SONGTESTER_H_ */
Happy Together
The Turtles
1966
Sweet Emotion
Aerosmith
1975
Take It Easy
Eagles
1972
Roxanne
The Police
1978
Suspicious Minds
Elvis Presley
1969


0
Badge
Cream
1969
Godzilla
Blue Oyster Cult
1977
Behind Blue Eyes
The Who
1971
Call Me Maybe
Carly Rae Jepsen
2012
Let It Be
The Beatles
1967
Let It Be
Joan Baez
1971
Penny Lane
The Beatles
1967
pjh26@stroustrup:~/112/proj01$ cd Debug
pjh26@stroustrup:~/112/proj01/Debug$ ls
Application.d  main.d  makefile    PlayList.d  PlayListTester.d  proj01  Song.o        SongTester.o  subdir.mk
Application.o  main.o  objects.mk  PlayList.o  PlayListTester.o  Song.d  SongTester.d  sources.mk
pjh26@stroustrup:~/112/proj01/Debug$ make all
make: Nothing to be done for 'all'.
pjh26@stroustrup:~/112/proj01/Debug$ cd ..
pjh26@stroustrup:~/112/proj01$ ./Debug/proj01
Preparing PlayList Manager!
Testing class Song..
- constructors ... 0 1 Passed!
- readFrom()...0 1 2 3 Passed!
- writeTo()... 0 1 2 Passed!
- operator==... 0 1 2 3 Passed!
All tests passed!

Testing class PlayList...
- constructors... 0  Passed!
- searchByArtist()...0 1 2  Passed!
- searchByYear()...0 1 2  Passed!
- searchByTitlePhrase()...0 1 2  Passed!
- addSong() & removeSong()... 0 1 2 Passed!
- save()... 0 1 Passed!
All tests passed!

Welcome to the PlayList Manager!
Please enter the PlayList you would like to open...
appTest.txt

Please Enter:
   1 - to search the PlayList for songs by a given artist
   2 - to search the PlayList for songs from a given year
   3 - to search the PlayList for songs with a given phrase in their title
   4 - to add a new song to the PlayList
   5 - to remove a song from the PlayList
   0 - to quit
1
Enter Artist name to search...
Eagles

Take It EasyEagles1972

Please Enter:
   1 - to search the PlayList for songs by a given artist
   2 - to search the PlayList for songs from a given year
   3 - to search the PlayList for songs with a given phrase in their title
   4 - to add a new song to the PlayList
   5 - to remove a song from the PlayList
   0 - to quit
2
Enter song year to search...
1969

Suspicious MindsElvis Presley1969

Please Enter:
   1 - to search the PlayList for songs by a given artist
   2 - to search the PlayList for songs from a given year
   3 - to search the PlayList for songs with a given phrase in their title
   4 - to add a new song to the PlayList
   5 - to remove a song from the PlayList
   0 - to quit
3
Enter title phrase to search...
Roxanne

RoxanneThe Police1978

Please Enter:
   1 - to search the PlayList for songs by a given artist
   2 - to search the PlayList for songs from a given year
   3 - to search the PlayList for songs with a given phrase in their title
   4 - to add a new song to the PlayList
   5 - to remove a song from the PlayList
   0 - to quit
4
Enter the Title of the song you wish to add to the PlayList...
The Wall
Enter the Artist of the song you wish to add to the PlayList...
Pink Floye d
Enter the Year of the song you wish to add to the PlayList...
1979
Addition Successful!

Please Enter:
   1 - to search the PlayList for songs by a given artist
   2 - to search the PlayList for songs from a given year
   3 - to search the PlayList for songs with a given phrase in their title
   4 - to add a new song to the PlayList
   5 - to remove a song from the PlayList
   0 - to quit
3
Enter title phrase to search...
The Wall

The WallPink Floyd1979

Please Enter:
   1 - to search the PlayList for songs by a given artist
   2 - to search the PlayList for songs from a given year
   3 - to search the PlayList for songs with a given phrase in their title
   4 - to add a new song to the PlayList
   5 - to remove a song from the PlayList
   0 - to quit
5
Enter the Title of the song you wish to remove to the PlayList...
Te   he Wall
Enter the Artist of the song you wish to remove to the PlayList...
Pink Floyd
Enter the Year of the song you wish to remove to the PlayList...
1979
Song removal successful!

Please Enter:
   1 - to search the PlayList for songs by a given artist
   2 - to search the PlayList for songs from a given year
   3 - to search the PlayList for songs with a given phrase in their title
   4 - to add a new song to the PlayList
   5 - to remove a song from the PlayList
   0 - to quit
3
Enter title phrase to search...
The Wall
No songs of this title.

Please Enter:
   1 - to search the PlayList for songs by a given artist
   2 - to search the PlayList for songs from a given year
   3 - to search the PlayList for songs with a given phrase in their title
   4 - to add a new song to the PlayList
   5 - to remove a song from the PlayList
   0 - to quit
NO
Please enter a valid option.

Please Enter:
   1 - to search the PlayList for songs by a given artist
   2 - to search the PlayList for songs from a given year
   3 - to search the PlayList for songs with a given phrase in their title
   4 - to add a new song to the PlayList
   5 - to remove a song from the PlayList
   0 - to quit
0
Exiting PlayList Manager...
Goodbye!pjh26@stroustrup:~/112/proj01$ exit

Script done on Tue 13 Feb 2018 07:16:06 PM EST
