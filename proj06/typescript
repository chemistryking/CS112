Script started on Tue 27 Mar 2018 10:30:02 PM EDT
pjh26@ritchie:~/112/proj06$ ls
CongaLine.cpp  Debug   listStreamOut.txt  ListTest1.txt  ListTester.cpp  ListTestWrite1.txt  main.cpp
CongaLine.h    List.h  listTest1.txt	  listTest2.txt  ListTester.h	 ListTestWrite2.txt  typescript
pjh26@ritchie:~/112/proj06$ cat main.cpp CongaLine.h CongaLin.  e ne.cpp ListTester.h ListTester.cpp List.h
/* main.cpp is the driver for a Conga line simulation.
 *
 * @author: Joel Adams, for CS 112 at Calvin College.
 *
 * Based on an exercise by Marc LeBlanc from Wheaton College (MS).
 */

#include "CongaLine.h"
#include "ListTester.h"

int main() {
	ListTester lt;
	lt.runTests();
	cout << "\n\n" << flush;
	CongaLine dance("Ann", "Bob");
	dance.run();
}
/* CongaLine.h declares class CongaLine,
 *  a Conga line dance simulation.
 *
 * @author: Joel Adams, for CS 112 at Calvin College.
 *
 * Based on an exercise by Marc LeBlanc from Wheaton College (MS).
 */


#ifndef CONGALINE_H_
#define CONGALINE_H_

#include "List.h"
#include <string>
using namespace std;

class CongaLine {
public:
	CongaLine(const string& person1, const string& person2);
	void run();

private:
	List<string> myLine;

	string MY_MENU;
	string myFirstPerson;
	string mySecondPerson;
};

#endif /* CONGALINE_H_ */
/* CongaLine.cpp defines the methods for class CongaLine.
 *
 * @author: Joel Adams, for CS 112 at Calvin College.
 *
 * Based on an exercise by Marc LeBlanc from Wheaton College (MS).
 */

#include "CongaLine.h"

/* The CongaLine constructor
 * @param: person1, a string
 * @param: person2, a string
 * Postcondition: myFirstPerson == person1
 *             && mySecondPerson == person2
 *             && person1 is the first Item in myLine
 *             && person2 is the second Item in myLine
 *             && MY_MENU has been initialized.
 */
CongaLine::CongaLine(const string& person1, const string& person2) {
	myLine.append(person1);
	myLine.append(person2);
	myFirstPerson = person1;
	mySecondPerson = person2;
	MY_MENU = string("Please enter:\n")
				    + " 1 to join the Conga line at the end\n"
					+ " 2 to join the Conga line after a particular person\n"
					+ " 3 to join the Conga line before a particular person\n"
					+ " 4 to quit\n"
					+ "--> ";
}

/* Method to run the CongaLine simulation,
 *  prompting the user via cout
 *  and reading the user's input via cin.
 */
void CongaLine::run() {
	unsigned menuChoice = 0;
	string yourName, otherPersonsName;
	cout << myFirstPerson << " and " << mySecondPerson
			<< " have started a Conga Line!" << endl;

	while (menuChoice != 4) {
		cout << "\n " << myLine << "\n\n";
//		cout << "\n"; myLine.writeTo(cout); cout << "\n\n";
		cout << "Conga, Conga, Con-GA!  Conga, Conga, Con-GA!\n" << endl;
		cout << MY_MENU;
		cin >> menuChoice;
		if (menuChoice == 1 || menuChoice == 2 || menuChoice == 3) {
			cout << "\nWhat is your name? ";
			cin >> yourName;
		}

		switch( menuChoice ) {
		case 1:
			myLine.append(yourName);
			break;
		case 2:
			cout << "Who do you want to follow? ";
			cin >> otherPersonsName;
			if ( !myLine.insertAfter(otherPersonsName, yourName) ) {
				cout << "\n***" << otherPersonsName
					 << " is not dancing!\n" << endl;
			}
			break;
		case 3:
			cout << "Who do you want to precede? ";
			cin >> otherPersonsName;
			if ( !myLine.insertBefore(otherPersonsName, yourName) ) {
				cout << "\n***" << otherPersonsName
					 << " is not dancing!\n" << endl;
			}
			break;
		case 4:
			cout << "\nThe dance is done!\n";
			break;
		default:
			cout << "\n*** " << menuChoice
			     << " is not a valid choice!\n" << endl;
		}
	}
}

/* ListTester.h declares the test-class for class List.
 * Joel Adams, for CS 112 at Calvin College.
 * Continued by Peter Haagsma and Jonathon Ellis
 */

#ifndef LISTTESTER_H_
#define LISTTESTER_H_

class ListTester {
public:
	void runTests();
	void testDefaultConstructor();
	void testNodeDefaultConstructor();
	void testNodeExplicitConstructor();
	void testAppend();
	void testDestructor();
	void testCopyConstructor();
	void testAssignment();
	void testEquality();
	void testReadFromStream();
	void testWriteToString();
	void testPrepend();
	void testInsert();
	void testInequality();
	void testWriteToStream() const;
	void testReadFromFile() const;
	void testGetIndexOf();
	void testRemove();
	void testInsertAfter();
	void testInsertBefore();
	void testOutputOperator();
};

#endif /*LISTTESTER_H_*/
/* ListTester.cpp defines the test methods for class List.
 * Joel Adams, for CS 112 at Calvin College.
 * Continued by Peter Haagsma and Jonathon Ellis
 */


#include "ListTester.h" // ListTester
#include "List.h"       // List
#include <iostream>     // cin, cout
#include <fstream>		// i/ofstream
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // underflow_error
using namespace std;

void ListTester::runTests() {
	cout << "Running List tests..." << endl;
	testDefaultConstructor();
	testNodeDefaultConstructor();
	testNodeExplicitConstructor();
	testAppend();
	testDestructor();
	testCopyConstructor();
	testAssignment();
	testEquality();
	testReadFromStream();
	testWriteToString();
	testPrepend();
	testInsert();
	testInequality();
	testWriteToStream();
	testReadFromFile();
	testGetIndexOf();
	testRemove();
	testInsertAfter();
	testInsertBefore();
	testOutputOperator();
	cout << "All tests passed!" << endl;
}
void ListTester::testDefaultConstructor() {
	cout << "Testing List default constructor... " << flush;
	List<double> aList;
	assert( aList.mySize == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << "Passed!" << endl;
}
void ListTester::testNodeDefaultConstructor() {
	cout << "Testing Node default constructor... " << flush;
	List<double>::Node aNode;
	assert( aNode.myItem == double() );
	assert( aNode.myNext == NULL );
	cout << "Passed!" << endl;
}
void ListTester::testNodeExplicitConstructor() {
	cout << "Testing Node explicit constructor... " << flush;
	List<double>::Node n1(11, NULL);
	assert( n1.myItem == 11 );
	assert( n1.myNext == NULL );
	cout << " 1 " << flush;

	List<double>::Node *n3 = new List<double>::Node(33, NULL);
	List<double>::Node n2(22, n3);
	assert( n2.myItem == 22 );
	assert( n2.myNext == n3 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}
void ListTester::testAppend() {
	cout << "Testing append()... " << flush;
	// empty List
	List<double> aList;
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	try {
		aList.getFirst();
		cerr << "getFirst() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0a " << flush;
	}
	try {
		aList.getLast();
		cerr << "getLast() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0b " << flush;
	}
	// append to empty list
	aList.append(11);
	assert( aList.getSize() == 1 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast == aList.myFirst );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 11 );
	cout << aList.myFirst->myNext;
	assert( aList.myFirst->myNext == NULL );
	cout << " 1 " << flush;
	// append to a list containing 1 Item
	aList.append(22);
	assert( aList.getSize() == 2 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.myFirst != aList.myLast );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 22 );
	assert( aList.myFirst->myNext != NULL );
	assert( aList.myLast->myNext == NULL );
	cout << " 2 " << flush;
	// append to a list containing 2 Items
	aList.append(33);
	assert( aList.getSize() == 3 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 33 );
	assert( aList.myFirst->myNext->myItem == 22 );
	assert( aList.myLast->myNext == NULL );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}
void ListTester::testDestructor() {
	cout << "Testing destructor... " << flush;
	List<double> aList;
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 1 " << flush;

	aList.append(11);
	aList.append(22);
	aList.append(33);
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 2 " << flush;
	cout << "Passed!  But double-check for memory leaks!" << endl;
}
void ListTester::testCopyConstructor() {
	cout << "Testing copy constructor... " << flush;
	// copy empty list
	List<double> list1;
	List<double> list2(list1);
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;

	// copy nonempty list
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4(list3);
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
	assert( list4.myFirst != list3.myFirst );
	assert( list4.myLast != list3.myLast );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}
void ListTester::testAssignment() {
	cout << "Testing assignment... " << flush;
	// empty to empty assignment
	List<double> list1;
	List<double> list2;
	list2 = list1;
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;

	// non-empty to empty assignment
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4;
	list4 = list3;
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
      // check that nodes are distinct
	assert( list4.myFirst != list3.myFirst );
	assert( list4.myFirst->myNext != list3.myFirst->myNext );
	assert( list4.myLast != list3.myLast );
	cout << " 2 " << flush;

	// equal-sized non-empty to non-empty assignment
	List<double> list5;
	list5.append(44);
	list5.append(55);
	list5.append(66);
	list5 = list3;
	assert( list5.getSize() == 3 );
	assert( list5.getFirst() == 11 );
	assert( list5.getLast() == 33 );
	assert( list5.myFirst->myNext->myItem == 22 );
      // check that nodes are distinct
	assert( list5.myFirst != list3.myFirst );
	assert( list5.myFirst->myNext != list3.myFirst->myNext );
	assert( list5.myLast != list3.myLast );
	cout << " 3 " << flush;

	// empty to non-empty assignment
	List<double> list6;
	list6.append(44);
	list6.append(55);
	list6.append(66);
	List<double> list7;
	list6 = list7;
	assert( list6.getSize() == 0 );
	assert( list6.myFirst == NULL );
	assert( list6.myLast == NULL );
	cout << " 4 " << flush;

	// unequal-sized non-empty to non-empty assignment
	List<double> list8;
	list8.append(44);
	list8.append(55);
	list8.append(66);
	list8.append(77);
	list8 = list3;
	assert( list8.getSize() == 3 );
	assert( list8.getFirst() == 11 );
	assert( list8.getLast() == 33 );
	assert( list8.myFirst->myNext->myItem == 22 );
      // check that nodes are distinct
	assert( list8.myFirst != list3.myFirst );
	assert( list8.myFirst->myNext != list3.myFirst->myNext );
	assert( list8.myLast != list3.myLast );
	cout << " 5 " << flush;

	// assignment chaining
	List<double> list9;
	list9.append(44);
	list9.append(55);
	list9.append(66);
	list9.append(77);
	List<double> list10;
	list10 = list9 = list8;
	assert( list10.getSize() == 3 );
	assert( list10.getFirst() == 11 );
	assert( list10.getLast() == 33 );
	assert( list10.myFirst->myNext->myItem == 22 );
	cout << " 6 " << flush;

	// self-assignment (stupid, but possible)
	List<double> list11;
	list11.append(11);
	list11.append(22);
	list11.append(33);
	list11 = list11;
	assert( list11.getSize() == 3 );
	assert( list11.getFirst() == 11 );
	assert( list11.getLast() == 33 );
	assert( list11.myFirst->myNext->myItem == 22 );
	cout << " 7 " << flush;

	cout << "Passed!  But double-check for memory leaks!" << endl;
}
void ListTester::testEquality() {
	cout << "Testing equality... " << flush;
	List<double> list0;
	List<double> list1;
	List<double> list3;

	//both empty
	assert( list0 == list1);
	cout << " 0 " << flush;
	for (unsigned i = 0; i < 3; ++i) {
		list0.append(i+1);
	}
	//one empty list one list with items
	assert( !(list0 == list1) );
	cout << " 1 " << flush;

	//both with items and equal
	for (unsigned i = 0; i < 3; ++i) {
		list1.append(i+1);
	}
	assert( list0 == list1 );
	cout << " 2 " << flush;

	//Equal size different values
	for (unsigned i = 0; i < 3; ++i) {
		list3.append(i+10);
	}
	assert( !(list1 == list3) );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}
void ListTester::testReadFromStream() {
	cout << "Testing readFrom(istream)... " << flush;

	ifstream fin("ListTest1.txt");
	assert( fin.is_open() );

	List<double> list0;
	List<double> list1;
	list0.readFrom(fin);
	list1.readFrom(fin);

	List<double>::Node* l0Ptr = list0.myFirst;
	List<double>::Node* l1Ptr = list1.myFirst;

	for (unsigned i = 1; i < 6; i++) {
		assert( l0Ptr->myItem == i );
		assert( l1Ptr->myItem == (2*i) );
		l0Ptr = l0Ptr->myNext;
		l1Ptr = l1Ptr->myNext;
	}
	fin.close();
	cout << " 0 " << flush;

	cout << "Passed!" << endl;
}
void ListTester::testWriteToString() {
	cout << "Testing writeTo(string)... " << flush;

	List<double> list0;
	List<double> list1;
	for (unsigned i = 1; i < 6; i++) {
		list0.append(i);
		list1.append(i*2);
	}
	list0.writeTo("ListTestWrite1.txt");
	list1.writeTo("ListTestWrite2.txt");

	ifstream fin1("ListTestWrite1.txt");
	ifstream fin2("ListTestWrite2.txt");

	double list1Item, list2Item;

	for (unsigned i = 1; i < 6; i++) {
		fin1 >> list1Item;
		fin2 >> list2Item;
		assert( list1Item == i );
		assert( list2Item == i*2 );
	}


	fin1.close();
	fin2.close();

	cout << "Passed!" << endl;
}
void ListTester::testPrepend() {
	cout << "Testing prepend()... " << flush;
	// The empty case
	List<double> list0;
	list0.prepend(1);
	assert( list0.myFirst != NULL );
	assert( list0.myLast != NULL );
	assert( list0.myFirst == list0.myLast );
	assert( list0.myFirst->myItem == 1 );
	assert( list0.myFirst->myNext == NULL);
	cout << " 0 " << flush;

	// Non-empty case
	list0.prepend(3);
	assert( list0.myFirst != NULL );
	assert( list0.myLast != NULL );
	assert( list0.myFirst != list0.myLast );
	assert( list0.myFirst->myItem == 3 );
	assert( list0.myFirst->myNext == list0.myLast);
	assert( list0.myFirst->myNext->myItem == list0.myLast->myItem );
	assert( list0.myLast->myItem == 1);
	assert( list0.myLast == list0.myFirst->myNext );
	cout << " 1 " << flush;

	cout << "Passed!" << endl;
}
void ListTester::testInsert() {
	cout << "Testing insert()..." << flush;
	// Empty case
	List<double> list;
	list.insert(5, 0);
	assert( list.myFirst != NULL );
	assert( list.myLast != NULL );
	assert( list.myFirst == list.myLast );
	assert( list.myFirst->myItem == 5 );
	assert( list.myFirst->myNext == NULL);
	assert( list.mySize == 1);
	cout << " 0 " << flush;

	// Non-empty index too large
	list.insert(6, 2000);
	assert( list.myFirst != list.myLast );
	assert( list.myFirst->myItem == 5 );
	assert( list.myLast->myItem == 6 );
	assert( list.myFirst->myNext == list.myLast);
	assert( list.myFirst->myNext->myItem == 6 );
	assert( list.myFirst->myNext->myNext == NULL );
	assert( list.mySize == 2);
	cout << " 1 " << flush;

	// Non-empty index negative
	list.insert(4, -1000);
	assert( list.myFirst->myItem == 4 );
	assert( list.myLast->myItem == 6 );
	assert( list.myFirst->myNext->myNext == list.myLast);
	assert( list.myFirst->myNext->myItem == 5 );
	assert( list.myFirst->myNext->myNext->myItem == 6 );
	assert( list.myFirst->myNext->myNext->myNext == NULL );
	assert( list.mySize == 3);
	cout << " 2 " << flush;

	// Non-empty index 0
	list.insert(3,0);
	assert( list.myFirst->myItem == 3 );
	assert( list.myLast->myItem == 6 );
	assert( list.myFirst->myNext->myNext->myNext == list.myLast);
	assert( list.myFirst->myNext->myItem == 4 );
	assert( list.myFirst->myNext->myNext->myItem == 5 );
	assert( list.myFirst->myNext->myNext->myNext->myItem == 6 );
	assert( list.myFirst->myNext->myNext->myNext->myNext == NULL );
	assert( list.mySize == 4);
	cout << " 3 " << flush;

	// Non-empty in range index
	list.insert(20, 2);
	assert( list.myFirst->myItem == 3 );
	assert( list.myLast->myItem == 6 );
	assert( list.myFirst->myNext->myNext->myNext->myNext == list.myLast);
	assert( list.myFirst->myNext->myItem == 4 );
	assert( list.myFirst->myNext->myNext->myItem == 20 );
	assert( list.myFirst->myNext->myNext->myNext->myItem == 5 );
	assert( list.myFirst->myNext->myNext->myNext->myNext->myItem == 6 );
	assert( list.myFirst->myNext->myNext->myNext->myNext->myNext == NULL );
	assert( list.mySize == 5);
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}
void ListTester::testInequality() {
	cout << "Testing !=... " << flush;

	// empty
	List<double> l0;
	List<double> l1;
	assert(!(l0 != l1));
	cout << " 0 " << flush;

	// empty vs nonempty
	List<double> l2;
	l2.append(0);
	l2.append(1);
	l2.append(2);
	assert(l1 != l2);
	cout << " 1 " << flush;

	// equal sized, same values
	List<double> l3, l4;
	for (unsigned i = 0; i < 3; i++) {
		l3.append(i);
		l4.append(i);
	}
	assert(!(l3 != l4));
	cout << " 2 " << flush;

	// equal sized, different values
	List<double> l5;
	for (unsigned i = 0; i < 3; i++) {
		l5.append(i + 1);
	}
	assert(l3 != l5);
	cout << " 3 " << flush;

	// equal sized, same except first
	l3.myFirst->myItem = 1;
	assert(l3 != l4);
	cout << " 4 " << flush;

	// equal sized, same except middle
	l3.myFirst->myItem = 0;
	l3.myFirst->myNext->myItem = 0;
	assert(l3 != l4);
	cout << " 5 " << flush;

	// equal sized, same except last
	l3.myFirst->myNext->myItem = 1;
	l3.myLast->myItem = 0;
	assert(l3 != l4);
	cout << " 6 " << flush;

	// equal sized, equal
	l3.myLast->myItem = 2;
	assert(!(l3 != l4));
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}
void ListTester::testWriteToStream() const {
	cout << "Testing writeTo(ostream)... " << flush;
	List<double> l1;
	for (unsigned i = 0; i < 5; i++) {
		l1.append(i + 10);
	}
	// write to an ofstream instead of cout, to automate the test
	ofstream fout("listStreamOut.txt");
	assert(fout.is_open());
	l1.writeTo(fout);
	fout.close();
	// now read in what we just wrote...
	ifstream fin("listStreamOut.txt");
	assert(fin.is_open());
	double value;
	for (unsigned i = 0; i < 5; i++) {
		fin >> value;
		assert(value == i + 10);
	}
	cout << "Passed!" << endl;
}
void ListTester::testReadFromFile() const {
	cout << "Testing readFrom()... " << flush;
	List<double> l1;
	l1.readFrom("listTest1.txt");
	assert(l1.getSize() == 3);
	assert(l1.myFirst != NULL);
	assert(l1.myLast != NULL);
	assert(l1.myFirst->myItem == 1);
	assert(l1.myFirst->myNext->myItem == 2);
	assert(l1.myLast->myItem == 3);
	cout << " 1 " << flush;

	List<double> l2;
	l2.readFrom("listTest2.txt");
	assert(l2.getSize() == 4);
	assert(l2.myFirst != NULL);
	assert(l2.myLast != NULL);
	assert(l2.myFirst->myItem == 2);
	assert(l2.myFirst->myNext->myItem == 4);
	assert(l2.myFirst->myNext->myNext->myItem == 6);
	assert(l2.myLast->myItem == 8);
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}
void ListTester::testGetIndexOf() {
	cout << "Testing getIndexOf()... " << flush;
	List<double> l1;
	int i1 = l1.getIndexOf(0);
	assert(i1 == -1);
	cout << " 1 " << flush;

	List<double> l2;
	for (unsigned i = 0; i < 5; i++) {
		l2.append(i + 10);
	}
	int i2 = l2.getIndexOf(10);
	int i3 = l2.getIndexOf(13);
	int i4 = l2.getIndexOf(14);
	int i5 = l2.getIndexOf(15);
	assert(i2 == 0);
	assert(i3 == 3);
	assert(i4 == 4);
	assert(i5 == -1);
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}
void ListTester::testRemove() {
	cout << "Testing remove()... " << flush;
	//empty List
	List<double> l0;
	try {
		l0.remove(0);
		cerr << "remove() succeeded on empty List";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}

	//one item in List
	List<double> l1;
	l1.append(1);
	double item1 = l1.remove(0);
	assert(item1 == 1);
	assert(l1.mySize == 0);
	assert(l1.myFirst == NULL);
	assert(l1.myLast == NULL);
	cout << " 1 " << flush;

	//more than one item in List
	List<double> l2;
	for (unsigned i = 0; i < 5; i++) {
		l2.append(i + 10);
	}

	//index before start of list
	double item2 = l2.remove(-1);
	assert(item2 == 10);
	assert(l2.mySize == 4);
	assert(l2.myFirst != NULL);
	assert(l2.myLast != NULL);
	assert(l2.myFirst->myItem == 11);
	assert(l2.myLast->myItem == 14);
	assert(l2.myFirst->myNext->myItem == 12);
	assert(l2.myFirst->myNext->myNext->myNext == l2.myLast);

	//index after end of list
	double item3 = l2.remove(4);
	assert(item3 == 14);
	assert(l2.mySize == 3);
	assert(l2.myFirst != NULL);
	assert(l2.myLast != NULL);
	assert(l2.myFirst->myItem == 11);
	assert(l2.myLast->myItem == 13);
	assert(l2.myFirst->myNext->myItem == 12);
	assert(l2.myFirst->myNext->myNext == l2.myLast);

	//index in list
	double item4 = l2.remove(1);
	assert(item4 == 12);
	assert(l2.mySize == 2);
	assert(l2.myFirst != NULL);
	assert(l2.myLast != NULL);
	assert(l2.myFirst->myItem == 11);
	assert(l2.myLast->myItem == 13);
	assert(l2.myFirst->myNext->myItem == 13);
	assert(l2.myFirst->myNext == l2.myLast);
	cout << " 2 " << flush;

	cout << "Passed!" << endl;
}
void ListTester::testInsertAfter() {
	cout << "Testing insertAfter()..." << flush;

	//Testing the empty case
	List<unsigned> l0;
	assert( !l0.insertAfter(5, 10) );
	assert( l0.mySize == 0 );
	cout << " 1 " << flush;

	//Testing non-empty case
	l0.append(10);
	assert( l0.mySize == 1);
	assert( !l0.insertAfter(11, 11) );
	assert( l0.mySize == 1 );
	assert( l0.insertAfter(10, 11) );
	assert( l0.mySize == 2 );
	assert( l0.myLast->myItem == 11 );
	assert( l0.insertAfter(10, 13) );
	assert( l0.myFirst->myNext->myItem == 13 );
	assert( l0.mySize == 3 );
	assert( !l0.insertAfter(50, 1) );
	assert( l0.mySize == 3 );
	cout << " 2 " << flush;

	cout << "Passed!" << endl;
}
void ListTester::testInsertBefore() {
	cout << "Testing insertBefore()..." << flush;
	//Testing the empty case
	List<unsigned> l0;
	assert( !l0.insertBefore(5, 10) );
	assert( l0.mySize == 0 );
	cout << " 1 " << flush;

	//Testing non-empty case
	l0.append(10);
	assert( l0.mySize == 1);
	assert( !l0.insertBefore(11, 11) );
	assert( l0.mySize == 1 );
	assert( l0.insertBefore(10, 11) );
	assert( l0.mySize == 2 );
	assert( l0.myFirst->myItem == 11 );
	assert( l0.myLast->myItem == 10 );
	assert( l0.insertBefore(10, 13) );
	assert( l0.myFirst->myItem == 11 );
	assert( l0.myFirst->myNext->myItem == 13 );
	assert( l0.myLast->myItem == 10 );
	assert( l0.mySize == 3 );
	assert( !l0.insertBefore(50, 1) );
	assert( l0.mySize == 3 );
	assert( l0.insertBefore(11, 12) );
	assert( l0.myFirst->myItem == 12 );
	assert( l0.myFirst->myNext->myItem == 11 );
	assert( l0.myFirst->myNext->myNext->myItem == 13 );
	assert( l0.myLast->myItem == 10 );

	cout << " 2 " << flush;

	cout << "Passed!" << endl;
}

void ListTester::testOutputOperator() {
	cout << "Testing <<..." << flush;

	List<unsigned> l;
	for (unsigned i = 1; i < 6; ++i) {
		l.append(i);
	}
	assert( l.mySize == 5 );
	assert( l.myFirst->myItem == 1 );
	assert( l.myFirst->myNext->myItem == 2 );
	assert( l.myFirst->myNext->myNext->myItem == 3 );
	assert( l.myFirst->myNext->myNext->myNext->myItem == 4 );
	assert( l.myLast->myItem == 5);

	cout << "Make sure the following output repeats twice" << endl;
	cout << "1=>2=>3=>4=>5" << endl;
	cout << l << "\t" << l << " " << flush;

	cout << "Passed!" << endl;
}
/* List.h declares the methods for the List class
 *
 *  Created on: Mar 6, 2018
 *      Author: Peter Haagsma
 *       Class: CS 112L C
 */

#ifndef LIST_H_
#define LIST_H_
#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <stdexcept>
#include <cassert>
using namespace std;

template <class Item>
class List {
public:
	List();
	List(const List<Item>& original);
	unsigned getSize() const;
	Item getFirst() const;
	Item getLast() const;
	void append(Item it);
	void prepend(Item it);
	void insert(Item it, int index);
	Item remove(int index);
	List<Item>& operator=(const List<Item>& l2);
	bool operator==(const List<Item>& l2);
	void readFrom(istream& cin);
	void writeTo(const string& fileName);
	bool operator!=(const List<Item>& l2);
	void writeTo(ostream& out) const;
	void readFrom(const string& fileName);
	int  getIndexOf(const Item& it);

	//Project 06
	bool insertAfter(const Item& otherPersonsName, const Item& yourName);
	bool insertBefore(const Item& otherPersonsName, const Item& yourName);

	/* Overloads << operator so that it outputs the desired format for lists
	 * @params: ostream and List object
	 * returns: ostream
	 * Precondition:  List object and empty ostream
	 * Postcondition: List object and ostream containing list in the following format
	 * 				  myItem1=>myItem2=>....=>myLastItem
	 */
	friend ostream& operator<<(ostream& out, const List<Item>& l) {
		for (Node * temp = l.myFirst; temp; temp = temp->myNext) {
			out << temp->myItem << flush;
			if (temp->myNext) {
				out << "=>";
			}
		}
		return out;
	}

	~List();
private:
	unsigned mySize;
	//Defining Node object
	struct Node {
		Node();
		Node(Item it, Node* next);
		Item myItem;
		Node* myNext;
		~Node();
	};
	Node* myFirst;
	Node* myLast;
	friend class ListTester;

};

/* Default constructor for List object
 * Precondition: Nothing
 * Postcondition:List object with no size or nodes
 */
template <class Item>
List<Item>::List() {
	mySize = 0;
	myFirst = NULL;
	myLast = NULL;
}

/* Copy constructor for List object
 * @params: List original
 * Precondition: Nothing
 * Postcondition:New list object that is a deep copy of List original
 */
template <class Item>
List<Item>::List(const List& original) {
	myFirst = myLast = NULL;
	mySize = 0;
	if (original.mySize > 0) {
		Node* oPtr = original.myFirst;
		while (oPtr != NULL) {
			append(oPtr->myItem);
			oPtr = oPtr->myNext;
		}
	}
}

/* Default constructor for Node object
 * Precondition: Nothing
 * Postcondition:Node object with no value, pointing at nothing
 */
template <class Item>
List<Item>::Node::Node() {
	myItem = 0;
	myNext = NULL;
}

/* Explicit constructor for Node object
 * @params: Item it and a pointer to the next Node
 * Precondition:  Nothing
 * Postcondition: Node object with value it, pointing at another node
 */
template <class Item>
List<Item>::Node::Node(Item it, Node* next) {
	myItem = it;
	myNext = next;
}

/* Getter for size of List object
 * returns: Size of List object
 */
template <class Item>
unsigned List<Item>::getSize() const {
	return mySize;
}

/* Getter for List object
 * Returns: pointer for first Node
 */
template <class Item>
Item List<Item>::getFirst() const {
	if (mySize != 0) {
		return myFirst->myItem;
	} else {
		throw underflow_error("List is empty cannot access values: getFirst()");
	}
}

/* Getter for List object
 * Returns: pointer for last Node
 */
template <class Item>
Item List<Item>::getLast() const {
	if (mySize != 0) {
		return myLast->myItem;
	} else {
		throw underflow_error("List is empty cannot access values: getFirst()");
	}
}

/* Appends a new node with value it to the end of a list
 * @params: Item it
 * Precondition:  List object
 * Postcondition: List object with new node holding value 'it' attached to the end
 */
template <class Item>
void List<Item>::append(Item it) {
	Node* newNodePtr = new List<Item>::Node(it, NULL);
	if (mySize == 0) {
		myFirst = newNodePtr;
	} else {
		myLast->myNext = newNodePtr;
	}
	myLast = newNodePtr;
	mySize++;
}

/* Assignment operator for List objects
 * @params: List original
 * returns: this
 * Precondition:  List objects on either side of '=' operator
 * Postcondition: List object on left side of '=' operator is a deep copy of the right side and
 * 				  the left side is returned.
 */
template <class Item>
List<Item>& List<Item>::operator=(const List<Item>& original) {
	if (this != &original) {
		delete myFirst;
		mySize = 0;
		myFirst = myLast = NULL;
		if (original.mySize != 0) {
			Node* oPtr = original.myFirst;
			while (oPtr != NULL) {
				append(oPtr->myItem);
				oPtr = oPtr->myNext;
			}
		}
	}
	return *this;
}

/* Prepends a new node with value it to the beginning of the list
 * @params: Item it
 * Precondition:  List object
 * Postcondition: List object with new node holding value 'it' inserted at beginning
 */
template <class Item>
void List<Item>::prepend(Item it) {
	Node* newNodePtr = new List<Item>::Node(it, NULL);
	if (mySize == 0) {
		myLast = newNodePtr;
	} else {
		newNodePtr->myNext = myFirst;
	}
	myFirst = newNodePtr;
	mySize++;
}

/* Inserts new node at 'index' holding value 'it'
 * @params: an Item it and an int index
 * Precondition:  List object
 * Postcondition: List object with new node holding value 'it' at 'index'
 */
template <class Item>
void List<Item>::insert(Item it, int index) {
	if (index <= 0 || mySize == 0) {
		prepend(it);
	} else if (index >= mySize) {
		append(it);
	} else {
		Node* tempPtr = myFirst;
		for (unsigned i = 0; i < index-1; ++i) {
			tempPtr = tempPtr->myNext;
		}
		Node* newNodePtr = new List<Item>::Node(it, tempPtr->myNext);
		tempPtr->myNext = newNodePtr;
		mySize++;
	}
}

/* Defines '==' operator for list objects
 * @params: Const List& object
 * Returns: True if myList and l2 have the same amount of nodes and hold the same values at
 * 			each one of the nodes, otherwise false
 */
template <class Item>
bool List<Item>::operator==(const List<Item>& l2) {
	if (mySize != l2.mySize) {
		return false;
	} else {
		Node* myPtr = myFirst;
		Node* l2Ptr = l2.myFirst;
		while (myPtr != NULL) {
			if (myPtr->myItem != l2Ptr->myItem) {
				return false;
			}
			l2Ptr = l2Ptr->myNext;
			myPtr = myPtr->myNext;
		}
		return true;
	}
}

/* Defines the != operator, returns true if this is not equal to l2, false if it is
 * @param l2, type List, a list to be compared
 * Return: true or false, type bool, the boolean value for the expression
 */
template <class Item>
bool List<Item>::operator!=(const List& l2) {
	if (mySize == l2.mySize) {
		Node * temp2 = l2.myFirst;
		for (Node * temp1 = myFirst; temp1; temp1 = temp1->myNext) {
			if (temp1->myItem != temp2->myItem) {
				return true;
			}
			temp2 = temp2->myNext;
		}
		return false;
	}
	return true;
}

/* Reads a line from an istream and creates a list from that line
 * @params: istream cin
 * Precondition:  istream 'cin' with a line inside containing values for a list
 * Postcondition: List object containing values from istream 'cin'
 */
template <class Item>
void List<Item>::readFrom(istream& cin) {
	string line;
	getline(cin, line);
	stringstream streamLine(line);
	Item tempVal;
	while (streamLine >> tempVal) {
		append(tempVal);
	}

}

/* write the items of the nodes of the list to a file
 * @param out, type ostream, an open file to be written to
 * Precondition: an open ofstream
 */
template <class Item>
void List<Item>::writeTo(ostream& out) const {
	for (Node * temp = myFirst; temp; temp = temp->myNext) {
		out << temp->myItem << endl;
	}
}

/* Writes List object to a file with each value on a new line.
 * @params: const string& 'filename'
 * Precondition:  List object and .txt file
 * Postcondition: List object and .txt file containing the values of List object
 */
template <class Item>
void List<Item>::writeTo(const string& fileName) {
	ofstream fout(fileName.c_str());
	Node* myPtr = myFirst;
	for (unsigned i = 0; i < mySize; i++) {
		fout << myPtr->myItem << endl;
		myPtr = myPtr->myNext;
	}
	fout.close();
}

/* read the elements of a list from a file and put them in a list
 * @param fileName, type string, a filename to a file to be read from
 */
template <class Item>
void List<Item>::readFrom(const string& fileName) {
	delete myFirst;
	ifstream fin(fileName.c_str());
	assert(fin.is_open());
	Item num;
	while (true) {
		if (fin >> num) {
			append(num);
		} else {
			break;
		}
	}
	fin.close();
}

/* find the index of a given item in a list
 * @param it, type Item, an item to find in the list
 */
template <class Item>
int List<Item>::getIndexOf(const Item& it) {
	unsigned i = 0;
	for (Node * temp = myFirst; temp; temp = temp->myNext) {
		if (temp->myItem == it) {
			return i;
		}
		i++;
	}
	return -1;
}

/* remove a node at a given index
 * @param index, type int, an index to a node to be removed
 */
template <class Item>
Item List<Item>::remove(int index) {
	//Throw error if the list is empty
	if (mySize == 0) {
		throw range_error("Cannot remove an item from an empty List!");

	//If the size is 1, delete the list
	} else if (mySize == 1) {
		Item item = myFirst->myItem;
		delete myFirst;
		mySize = 0;
		myFirst = NULL;
		myLast = NULL;
		return item;

	//If the size is greater than 1
	} else {
		//Set indexes out of range to the first or last value
		if (index < 0) {
			index = 0;
		} else if (index > mySize - 1) {
			index = mySize - 1;
		}
		Node* temp = myFirst;
		//When removing first node
		if (index == 0) {
			mySize--;
			Item item = temp->myItem;
			myFirst = temp->myNext;
			temp->myNext = NULL;
			delete temp;
			return item;
		//When removing any other node
		} else {
			for (unsigned i = 0; i < index; i++) {
				//Stop loop when at the node before the index
				if (i == index - 1) {
					mySize--;
					//Pointer to node to be removed
					Node * temp2 = temp->myNext;
					Item item = temp2->myItem;
					temp->myNext = temp->myNext->myNext;
					//Set pointers of node to be removed to NULL to prevent recursion when deleted
					if (temp->myNext) {
						temp->myNext->myNext = NULL;
						temp2->myNext = NULL;
					}
					//Edit my last if the last node is removed
					if (!temp->myNext) {
						myLast = temp;
					}
					delete temp2;
					return item;
				}
				//iterate though the nodes using a pointer
				temp = temp->myNext;
			}
		}
	}
}

/* Searches list for a certain item and inserts our item in a new node after said item if it is found
 * @params: item one is searching for and the item we wish to insert
 * Returns: true if the item we're searching for is in the list, otherwise false
 * Precondition:  List object
 * Postcondition: List object with item inserted after the one we're searching for if it is in the list.
 */
template <class Item>
bool List<Item>::insertAfter(const Item& otherPersonsName, const Item& yourName) {
	if (mySize == 0) {
		return false;
	}

	unsigned index = 0;
	for (Node* tempPtr = myFirst; tempPtr; tempPtr = tempPtr->myNext) {
		if (tempPtr->myItem == otherPersonsName) {
			if ( ++index == mySize ) {
				append(yourName);
			} else {
				Node* newNodePtr = new List<Item>::Node(yourName, tempPtr->myNext);
				tempPtr->myNext = newNodePtr;
				mySize++;
			}
			return true;
		}
	}
	return false;
}

/* Searches list for a certain item and inserts our item in a new node before said item if it is found
 * @params: item one is searching for and the item we wish to insert
 * Returns: true if the item we're searching for is in the list, otherwise false
 * Precondition:  List object
 * Postcondition: List object with item inserted before the one we're searching for if it is in the list.
 */
template <class Item>
bool List<Item>::insertBefore(const Item& otherPersonsName, const Item& yourName) {
	if (mySize == 0) {
		return false;
	}

	unsigned index = 0;
	Node* tempPtrPrev;
	for (Node* tempPtr = myFirst; tempPtr; tempPtr = tempPtr->myNext) {
		if (tempPtr->myItem == otherPersonsName) {
			if (index == 0) {
				prepend(yourName);
			} else if (index >= mySize) {
				append(yourName);
			} else {
				Node* newNodePtr = new List<Item>::Node(yourName, tempPtr);
				tempPtrPrev->myNext = newNodePtr;
				mySize++;
			}
			return true;
		}
		tempPtrPrev = tempPtr;
		index++;
	}
	return false;
}

/* Destructor for Node Objects
 * Precondition:  Node object
 * Postcondition: Node object deleted; recursively calling delete on the next node object
 */
template <class Item>
List<Item>::Node::~Node() {
	delete myNext;
}

/* Destructor for List objects
 * Precondition:  List object
 * Postcondition: Nodes deleted recursively and pointers set to null, size set to 0
 */
template <class Item>
List<Item>::~List() {
	delete myFirst;
	myFirst = myLast = NULL;
	mySize = 0;
}

#endif /* LIST_H_ */
pjh26@ritchie:~/112/proj06$ cd d Debug
pjh26@ritchie:~/112/proj06/Debug$ make all
make: Nothing to be done for 'all'.
pjh26@ritchie:~/112/proj06/Debug$ cd ..
pjh26@ritchie:~/112/proj06$ ./Debug/proj06
Running List tests...
Testing List default constructor... Passed!
Testing Node default constructor... Passed!
Testing Node explicit constructor...  1  2 Passed!
Testing append()...  0a  0b 0 1  2  3 Passed!
Testing destructor...  1  2 Passed!  But double-check for memory leaks!
Testing copy constructor...  1  2 Passed!
Testing assignment...  1  2  3  4  5  6  7 Passed!  But double-check for memory leaks!
Testing equality...  0  1  2  3 Passed!
Testing readFrom(istream)...  0 Passed!
Testing writeTo(string)... Passed!
Testing prepend()...  0  1 Passed!
Testing insert()... 0  1  2  3  4 Passed!
Testing !=...  0  1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed!
Testing readFrom()...  1  2 Passed!
Testing getIndexOf()...  1  2 Passed!
Testing remove()...  0  1  2 Passed!
Testing insertAfter()... 1  2 Passed!
Testing insertBefore()... 1  2 Passed!
Testing <<...Make sure the following output repeats twice
1=>2=>3=>4=>5
1=>2=>3=>4=>5	1=>2=>3=>4=>5 Passed!
All tests passed!


Ann and Bob have started a Conga Line!

 Ann=>Bob

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 1

What is your name? Chris

 Ann=>Bob=>Chris

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 2

What is your name? Don
Who do you want to follow? Ann

 Ann=>Don=>Bob=>Chris

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 2

What is your name? Eve
Who do you want to follow? Bob

 Ann=>Don=>Bob=>Eve=>Chris

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 2

What is your name? Fred
Who do you want to follow? Chris

 Ann=>Don=>Bob=>Eve=>Chris=>Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 3

What is your name? Gwen Ann
Who do you want to precede? 
 Gwen=>Ann=>Don=>Bob=>Eve=>Chris=>Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 3

What is your name? Hall 9000
Who do you want to precede? Eve

 Gwen=>Ann=>Don=>Bob=>Hal9000=>Eve=>Chris=>Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 3

What is your name? Ivy
Who do you want to precede? Fred

 Gwen=>Ann=>Don=>Bob=>Hal9000=>Eve=>Chris=>Ivy=>Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 2

What is your name? Joe
Who do you want to follow? Bilbo

***Bilbo is not dancing!


 Gwen=>Ann=>Don=>Bob=>Hal9000=>Eve=>Chris=>Ivy=>Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 3

What is your name? Jon
Who do you want to precede? Frodo

***Frodo is not dancing!


 Gwen=>Ann=>Don=>Bob=>Hal9000=>Eve=>Chris=>Ivy=>Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 0

*** 0 is not a valid choice!


 Gwen=>Ann=>Don=>Bob=>Hal9000=>Eve=>Chris=>Ivy=>Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 5

*** 5 is not a valid choice!


 Gwen=>Ann=>Don=>Bob=>Hal9000=>Eve=>Chris=>Ivy=>Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 1

What is your name? Gandalf

 Gwen=>Ann=>Don=>Bob=>Hal9000=>Eve=>Chris=>Gandalf

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 4

The dance is done!
pjh26@ritchie:~/112/proj06$ exit

Script done on Tue 27 Mar 2018 10:34:30 PM EDT
